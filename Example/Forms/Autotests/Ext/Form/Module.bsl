#Область НаборТестов

&НаКлиенте
Процедура ЗаполнитьНаборТестов(ЮнитТест) Экспорт
	
	ЮнитТест.Добавить("Тест_ИнициализацияБиблиотеки", "Инициализация библиотеки");
	ЮнитТест.Добавить("Тест_СвойстваУправлениеОкнами", "Свойства WindowsControl");
	ЮнитТест.Добавить("Тест_ПоискФайлов", "Поиск файлов");

	Если ЭтоПлатформа1С() Тогда
		ЮнитТест.Добавить("Тест_МетодыУправлениеОкнами", "Методы WindowsControl");
		ЮнитТест.Добавить("Тест_ПолучениеСнимкаЭкрана", "Получение снимка экрана");
		ЮнитТест.Добавить("Тест_УправлениеПриложением", "Автоматизация интерфейса");
		ЮнитТест.Добавить("Тест_УвеличениеЭкрана", "Увеличение экрана");
		ЮнитТест.Добавить("Тест_ВиртуальныеРабочиеСтолы", "Виртуальные рабочие столы");
		ЮнитТест.Добавить("Тест_РегулярныеВыражения", "Регулярные выражения");
		ЮнитТест.Добавить("Тест_МетодыВизуаилзации", "Методы визуализации");
		ЮнитТест.Добавить("Тест_ЗапускПриложений", "Запуск приложений");
		ЮнитТест.Добавить("Тест_БуферОбмена", "Работа с буфером обмена");
		ЮнитТест.Добавить("Тест_ФункционалGit", "Управление версиями Git");
		ЮнитТест.Добавить("Тест_КлиентWebSocket", "Клиент WebSocket");
		ЮнитТест.Добавить("Тест_ОшибкаРекурсии", "Ошибка рекурсии сценария");
		ЮнитТест.Добавить("Тест_ОшибкиПарсингаGherkin", "Обработка ошибок Gherkin");
	КонецЕсли;
	
	ЮнитТест.Добавить("Тест_ПарсингЗаголовковФичи", "Парсинг заголовков фичи");
	ЮнитТест.Добавить("Тест_ПарсингПримитивногоСценария", "Парсинг примитивного сценария");
	ЮнитТест.Добавить("Тест_ИспользованиеГрупп", "Группировка шагов");
	ЮнитТест.Добавить("Тест_СценарийНаАнглийскомЯзыке", "Сценарий на английском языке");
	ЮнитТест.Добавить("Тест_СоставныеКлючевыеСлова", "Составные ключевые слова");
	ЮнитТест.Добавить("Тест_МногострочныеПараметры", "Многострочные параметры");
	ЮнитТест.Добавить("Тест_НесколькоСценариев", "Несколько сценариев");
	ЮнитТест.Добавить("Тест_РаботаСТаблицами", "Работа с таблицами");
	ЮнитТест.Добавить("Тест_СтруктураСценария", "Структура сценария");
	ЮнитТест.Добавить("Тест_СканированиеПапки", "Сканирование папки");
	ЮнитТест.Добавить("Тест_ФильтрацияСценариевПоТегам", "Фильтрация сценариев по тегам");
	ЮнитТест.Добавить("Тест_ЭкспортныеСценарии", "Экспортные сценарии");
	ЮнитТест.Добавить("Тест_ПередачаТаблицВСценарий", "Передача таблиц в сценарий");
	ЮнитТест.Добавить("Тест_РекурсивнаяПередачаТаблиц", "Рекурсивная передача таблиц");
	ЮнитТест.Добавить("Тест_ПередачаМногострочников", "Передача многострочных параметров");
	ЮнитТест.Добавить("Тест_СекцияПеременные", "Секция Переменные");
	
КонецПроцедуры

#КонецОбласти

#Область VanessaExt

&НаКлиенте
Процедура Тест_ИнициализацияБиблиотеки(Ожидается) Экспорт
	
	ИменаКомпонент = Новый Структура("WindowsControl,ProcessControl,ClipboardControl,GherkinParser,GitFor1C");
	Для каждого КлючЗначение Из ИменаКомпонент Цикл
		ИмяКомпоненты = "AddIn." + Ожидается.ИдентификаторКомпоненты + "." + КлючЗначение.Ключ;
		Ожидается.Тест().Компонента(КлючЗначение.Ключ).ИмеетТип(ИмяКомпоненты);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Тест_СвойстваУправлениеОкнами(Ожидается) Экспорт
	
	ВК = Ожидается.Тест().Компонента("WindowsControl").Вернуть();
	
	Ожидается.Тест().Что(ВК).Получить("Version").ИмеетТип("Строка");
	Ожидается.Тест().Что(ВК).Получить("Версия").ИмеетТип("Строка");
	Ожидается.Тест().Что(ВК).Получить("ВЕРСИЯ").ИмеетТип("Строка");
	Ожидается.Тест().Что(ВК).Ошибка().Получить("UnknownProp");

	ИдентификаторПроцесса = Ожидается.Тест().Что(ВК).Получить("ИдентификаторПроцесса").Вернуть();
	Ожидается.Тест().Что(ВК).Проц("АктивироватьПроцесс", ИдентификаторПроцесса);
	Ожидается.Тест().Что(ВК).Получить("ProcessId").Больше(0);
	Ожидается.Тест().Что(ВК).Получить("ИдентификаторПроцесса").Больше(0);
	Ожидается.Тест().Что(ВК).Получить("АктивноеОкно").Больше(0);
	
	Ожидается.Тест().Что(ВК).Получить("СвойстваЭкрана");
	Ожидается.Тест().Что(ВК).Получить("СписокДисплеев");
	Ожидается.Тест().Что(ВК).Получить("СписокОкон");
	Ожидается.Тест().Что(ВК).Получить("ПозицияКурсора");
	
КонецПроцедуры

&НаКлиенте
Процедура Тест_БуферОбмена(Ожидается) Экспорт
	
	ВК = Ожидается.Тест().Компонента("WindowsControl").Вернуть();
	
	ИмяСвойства = "ТекстБуфераОбмена";
	ТестовыеДанные = "Текст примера для проверки";
	Ожидается.Тест().Что(ВК).Установить(ИмяСвойства, ТестовыеДанные);
	Ожидается.Тест().Что(ВК).Получить(ИмяСвойства).Равно(ТестовыеДанные);
	Ожидается.Тест().Что(ВК).Проц("ОчиститьБуферОбмена");
	Ожидается.Тест().Что(ВК).Получить(ИмяСвойства).Равно("");
	
	ИмяСвойства = "КартинкаБуфераОбмена";
	ТестовыеДанные = ПолучитьЛоготип1С();
	ИсходнаяКартинка = Новый Картинка(ТестовыеДанные);
	Ожидается.Тест().Что(ВК).Установить(ИмяСвойства, ТестовыеДанные);
	ДанныеБуфера = Ожидается.Тест().Что(ВК).Получить(ИмяСвойства).ЭтоКартинка().Вернуть();
	КартинкаБуфера = Новый Картинка(ДанныеБуфера);
	Ожидается.Тест("Ширина картинки").Что(КартинкаБуфера).Функц("Ширина").Равно(ИсходнаяКартинка.Ширина());
	Ожидается.Тест("Высота картинки").Что(КартинкаБуфера).Функц("Высота").Равно(ИсходнаяКартинка.Высота());
	Ожидается.Тест().Что(ВК).Проц("ОчиститьБуферОбмена");
	Ожидается.Тест().Что(ВК).Получить(ИмяСвойства).Ошибка().ЭтоКартинка();
	
КонецПроцедуры

&НаКлиенте
Процедура Тест_МетодыУправлениеОкнами(Ожидается) Экспорт
	
	ВК = Ожидается.Тест().Компонента("WindowsControl").Вернуть();
	
	Ожидается.Тест().Что(ВК).Функц("НайтиКлиентТестирования", 48000);
	Ожидается.Тест().Что(ВК).Функц("ПолучитьСписокПроцессов", Истина);
	Ожидается.Тест().Что(ВК).Функц("ПолучитьСписокДисплеев");
	Ожидается.Тест().Что(ВК).Функц("ПолучитьСвойстваОкна", 0);
	Ожидается.Тест().Что(ВК).Ошибка().Функц("UnknownFunc");
	Ожидается.Тест().Что(ВК).Ошибка().Проц("UnknownProc");
	
	ИдентификаторПроцесса = Ожидается.Тест().Что(ВК).Получить("ИдентификаторПроцесса").Вернуть();
	Ожидается.Тест().Что(ВК).Проц("АктивироватьПроцесс", ИдентификаторПроцесса);
	ИдентификаторОкна = Ожидается.Тест().Что(ВК).Получить("АктивноеОкно").Вернуть();
	Ожидается.Тест().Что(ВК).Функц("ПолучитьСвойстваОкна", ИдентификаторОкна).Получить("ProcessId").Равно(ИдентификаторПроцесса);
	
	Ожидается.Тест().Что(ВК).Функц("ПолучитьСписокДисплеев", ИдентификаторОкна);
	Ожидается.Тест().Что(ВК).Функц("ПолучитьСвойстваДисплея", ИдентификаторОкна);
	Ожидается.Тест().Что(ВК).Функц("ПолучитьСвойстваОкна", ИдентификаторОкна);
	Ожидается.Тест().Что(ВК).Функц("ПолучитьСписокОкон", ИдентификаторПроцесса);
	
	Размеры = Ожидается.Тест().Что(ВК).Функц("ПолучитьРазмерОкна", ИдентификаторОкна).JSON().Вернуть();
	Ожидается.Тест().Что(ВК).Проц("АктивироватьОкно", ИдентификаторОкна);
	Ожидается.Тест().Что(ВК).Проц("РаспахнутьОкно", ИдентификаторОкна);
	Ожидается.Тест().Что(ВК).Проц("РазвернутьОкно", ИдентификаторОкна);
	Ожидается.Тест().Что(ВК).Проц("СвернутьОкно", ИдентификаторОкна);
	Ожидается.Тест().Что(ВК).Проц("Пауза", 100);
	Ожидается.Тест().Что(ВК).Проц("РазвернутьОкно", ИдентификаторОкна);
	
	Ожидается.Тест().Что(ВК).Проц("УстановитьРазмерОкна", ИдентификаторОкна, Размеры.Width - 1, Размеры.Height - 1);
	Ожидается.Тест().Что(ВК).Проц("УстановитьПозициюОкна", ИдентификаторОкна, Размеры.Left + 1, Размеры.Top + 1);
	НовыеРазмеры = Ожидается.Тест().Что(ВК).Функц("ПолучитьРазмерОкна", ИдентификаторОкна).JSON().Вернуть();
	
	РазмерыСовпали = Истина
		И (Размеры.Left + 1 = НовыеРазмеры.Left)
		И (Размеры.Top + 1 = НовыеРазмеры.Top)
		И (Размеры.Width - 1 = НовыеРазмеры.Width)
		И (Размеры.Height - 1 = НовыеРазмеры.Height)
		И (Размеры.Right = НовыеРазмеры.Right)
		И (Размеры.Bottom = НовыеРазмеры.Bottom);
	
	Ожидается.Тест("Размеры и позиция окна совпали").Что(РазмерыСовпали).ЕстьИстина();
	
	Текст = Символы.ПС + "Пример вывода текста в консоль" + Символы.ПС;
	Ожидается.Тест().Что(ВК).Функц("ВывестиВКонсоль", Текст).ЕстьИстина();
	
КонецПроцедуры

&НаКлиенте
Процедура Тест_ПолучениеСнимкаЭкрана(Ожидается) Экспорт
	
	ВК = Ожидается.Тест().Компонента("WindowsControl").Вернуть();
	
	ИдентификаторОкна = Ожидается.Тест().Что(ВК).Получить("АктивноеОкно").Вернуть();
	Размеры = Ожидается.Тест().Что(ВК).Функц("ПолучитьРазмерОкна", ИдентификаторОкна).JSON().Вернуть();
	
	СнимокОбласти = Ожидается.Тест().Что(ВК).Функц("ПолучитьСнимокОбласти", Размеры.Left, Размеры.Top, Размеры.Width, Размеры.Height).ЭтоКартинка().Вернуть();
	СнимокЭкрана = Ожидается.Тест().Что(ВК).Функц("ПолучитьСнимокЭкрана").ЭтоКартинка().Вернуть();
	СнимокОкна = Ожидается.Тест().Что(ВК).Функц("ПолучитьСнимокЭкрана", 1).ЭтоКартинка().Вернуть();
	
	Ожидается.Тест().Что(ВК).Функц("ПолучитьСнимокОкна", ИдентификаторОкна).ЭтоКартинка();
	Ожидается.Тест().Что(ВК).Функц("ПолучитьСнимокОкна").ЭтоКартинка();
	
	Координаты = Ожидается.Тест().Что(ВК).Функц("НайтиФрагмент", СнимокЭкрана, СнимокОбласти).JSON().Вернуть();
	Ожидается.Тест("Фрагмент найден на картинке").Что(Координаты).Получить("Match").Больше(0.9);
	Координаты = Ожидается.Тест().Что(ВК).Функц("НайтиНаЭкране", СнимокОбласти).JSON().Вернуть();
	Ожидается.Тест("Фрагмент найден на экране").Что(Координаты).Получить("Match").Больше(0.9);
	
КонецПроцедуры

&НаКлиенте
Процедура Тест_ВиртуальныеРабочиеСтолы(Ожидается) Экспорт
	
	ВК = Ожидается.Тест().Компонента("WindowsControl").Вернуть();
	
	ИдентификаторПроцесса = Ожидается.Тест().Что(ВК).Получить("ИдентификаторПроцесса").Вернуть();
	ИдентификаторОкна = Ожидается.Тест().Что(ВК).Функц("ПолучитьГлавноеОкноПроцесса", ИдентификаторПроцесса).Вернуть();
	Ожидается.Тест().Что(ВК).Проц("АктивироватьПроцесс", ИдентификаторПроцесса);
	Ожидается.Тест().Что(ВК).Получить("АктивноеОкно").Равно(ИдентификаторОкна);
	СтарыйНомер = Ожидается.Тест().Что(ВК).Функц("ПолучитьТекущийРабочийСтол").Вернуть();
	Количество = Ожидается.Тест().Что(ВК).Функц("ПолучитьКоличествоРабочихСтолов").Вернуть();
	НовыйНомер = Ожидается.Тест().Что(ВК).Функц("СоздатьРабочийСтол").Равно(Количество).Вернуть();
	Ожидается.Тест().Что(ВК).Функц("ПолучитьКоличествоРабочихСтолов").Равно(Количество + 1);
	Ожидается.Тест().Что(ВК).Функц("ПереключитьРабочийСтол", НовыйНомер).Равно(Истина);
	Ожидается.Тест().Что(ВК).Функц("ПолучитьТекущийРабочийСтол").Равно(НовыйНомер);
	Ожидается.Тест().Что(ВК).Функц("ПолучитьРабочийСтолОкна", ИдентификаторОкна).Равно(СтарыйНомер);
	Ожидается.Тест().Что(ВК).Функц("ПереместитьОкноНаРабочийСтол", ИдентификаторОкна, НовыйНомер).Равно(Истина);
	Ожидается.Тест().Что(ВК).Функц("ПолучитьРабочийСтолОкна", ИдентификаторОкна).Равно(НовыйНомер);
	Ожидается.Тест().Что(ВК).Функц("ПереместитьОкноНаРабочийСтол", ИдентификаторОкна, СтарыйНомер).Равно(Истина);
	Ожидается.Тест().Что(ВК).Функц("УдалитьРабочийСтол", НовыйНомер, СтарыйНомер).Равно(Истина);
	Ожидается.Тест().Что(ВК).Функц("ПолучитьТекущийРабочийСтол").Равно(СтарыйНомер);
	
КонецПроцедуры

&НаКлиенте
Процедура Тест_РегулярныеВыражения(Ожидается) Экспорт
	
	ВК = Ожидается.Тест().Компонента("RegExp1C").Вернуть();
	
	Ожидается.Тест("Замена строки").Что(ВК).Функц("Заменить", "AAAA-12222-BBBBB-44455", "(\w+)-(\d+)-(\w+)-(\d+)", "$1*$2*$3*$4").Равно("AAAA*12222*BBBBB*44455");
	
	ПримерТекста = "Пример текста" + Символы.Таб + "для" + Символы.НПП + "разбинения  строки";
	ЭталонТекста = "[""Пример"",""текста"",""для"",""разбинения"",""строки""]";
	Ожидается.Тест("Разбиение строки").Что(ВК).Функц("Разделить", ПримерТекста, "\s+").Равно(ЭталонТекста);
	
КонецПроцедуры

&НаКлиенте
Процедура Тест_МетодыВизуаилзации(Ожидается) Экспорт
	
	ВК = Ожидается.Тест().Компонента("WindowsControl").Вернуть();
	
	Длительность = 2000;
	
	ИдентификаторПроцесса = Ожидается.Тест().Что(ВК).Получить("ИдентификаторПроцесса").Вернуть();
	ИдентификаторОкна = Ожидается.Тест().Что(ВК).Функц("ПолучитьОкноПроцесса", ИдентификаторПроцесса).Вернуть();
	Размеры = Ожидается.Тест().Что(ВК).Функц("ПолучитьРазмерОкна", ИдентификаторОкна).JSON().Вернуть();
	Ожидается.Тест().Что(ВК).Проц("УстановитьПозициюКурсора", Размеры.Left, Размеры.Top);
	Ожидается.Тест().Что(ВК).Проц("ЭмуляцияДвиженияМыши", Размеры.Left + Размеры.Width, Размеры.Top + Размеры.Height, 300, 3);
	Ожидается.Тест().Что(ВК).Проц("УстановитьПозициюКурсора", Размеры.Left + Размеры.Width / 2, Размеры.Top + Размеры.Height / 2);
	Ожидается.Тест().Что(ВК).Проц("ПоказатьНажатиеМыши", 255, 30, 12, 12, 127).Проц("Пауза", Длительность);
	
	ТекстПодсказки = "Тестирование методов визуализации";
	
	НастройкиРисования = Новый Структура;
	НастройкиРисования.Вставить("color", 255);
	НастройкиРисования.Вставить("transparency", 127);
	НастройкиРисования.Вставить("duration", Длительность);
	НастройкиРисования.Вставить("thickness", 5);
	НастройкиРисования.Вставить("frameDelay", 20);
	НастройкиРисования.Вставить("frameCount", 50);
	НастройкиРисования.Вставить("text", ТекстПодсказки);
	НастройкиРисования = ЗаписатьСтрокуJSON(НастройкиРисования);

	Ожидается.Тест().Что(ВК).Проц("НарисоватьТень", НастройкиРисования, Размеры.Left, Размеры.Top, Размеры.Width, Размеры.Height, ТекстПодсказки).Проц("Пауза", Длительность);
	Ожидается.Тест().Что(ВК).Проц("ПоказатьПодсказку", НастройкиРисования, Размеры.Left, Размеры.Top, ТекстПодсказки).Проц("Пауза", Длительность);
	
	ТочкиКривой = Новый Массив;
	ТочкиКривой.Добавить(Новый Структура("x,y", Размеры.Left, Размеры.Top));
	ТочкиКривой.Добавить(Новый Структура("x,y", Размеры.Left, Размеры.Top + Размеры.Height));
	ТочкиКривой.Добавить(Новый Структура("x,y", Размеры.Left + Размеры.Width, Размеры.Top));
	ТочкиКривой.Добавить(Новый Структура("x,y", Размеры.Left + Размеры.Width, Размеры.Top + Размеры.Height));
	ТочкиКривой = ЗаписатьСтрокуJSON(ТочкиКривой);

	Ожидается.Тест().Что(ВК).Проц("ПоказатьПодсказку", НастройкиРисования, Размеры.Left + Размеры.Width, Размеры.Top).Проц("Пауза", Длительность);
	Ожидается.Тест().Что(ВК).Проц("НарисоватьТень", НастройкиРисования, Размеры.Left, Размеры.Top, Размеры.Width, Размеры.Height).Проц("Пауза", Длительность);
	Ожидается.Тест().Что(ВК).Проц("НарисоватьПрямоугольник", НастройкиРисования, Размеры.Left, Размеры.Top, Размеры.Width, Размеры.Height).Проц("Пауза", Длительность);
	Ожидается.Тест().Что(ВК).Проц("НарисоватьЭллипс", НастройкиРисования, Размеры.Left, Размеры.Top, Размеры.Width, Размеры.Height).Проц("Пауза", Длительность);
	Ожидается.Тест().Что(ВК).Проц("НарисоватьСтрелку", НастройкиРисования, Размеры.Left, Размеры.Top + Размеры.Height, Размеры.Left + Размеры.Width, Размеры.Top).Проц("Пауза", Длительность);
	Ожидается.Тест().Что(ВК).Проц("НарисоватьКривую", НастройкиРисования, ТочкиКривой).Проц("Пауза", 1000);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КодироватьСтрокуСервер(Стр)
	Возврат КодироватьСтроку(Стр, СпособКодированияСтроки.КодировкаURL);
КонецФункции	


&НаКлиенте
Процедура Тест_КлиентWebSocket(Ожидается) Экспорт
	
	ВК = Ожидается.Тест().Компонента("WindowsControl").Вернуть();
	
	ИдентификаторПроцесса = Ожидается.Тест().Что(ВК).Получить("ИдентификаторПроцесса").Вернуть();
	
	Ожидается.Тест("Запуск браузера в режиме отладки");
	КомандаЗапускаБраузера = """" + НайтиБраузер() + """ --remote-debugging-port=9222";
	ЗапуститьПриложение(КомандаЗапускаБраузера);
	
	ВК.Пауза(1000);
	
	КоличествоПопыток = 10;
	ИнтернетАдрес = "https://github.com/";
	Для НомерПопытки = 1 По КоличествоПопыток Цикл
		HTTPЗапрос = Новый HTTPЗапрос("/json/new?" + КодироватьСтрокуСервер(ИнтернетАдрес));
		Попытка
			HTTPСоединение = Новый HTTPСоединение("localhost", 9222, , , , 10);
			HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("PUT", HTTPЗапрос);
			Прервать;
		Исключение
			Если НомерПопытки = КоличествоПопыток Тогда
				ВызватьИсключение "Не удалось подключиться к браузеру";
			КонецЕсли;
		КонецПопытки;
	КонецЦикла;
	
	АдресВебСокет = Ожидается.Тест("Адрес веб сокет").Что(HTTPОтвет).Функц("ПолучитьТелоКакСтроку").Получить("webSocketDebuggerUrl").Вернуть();
	Ожидается.Тест().Что(ВК).Функц("ОткрытьВебСокет", АдресВебСокет);
	
	ТекстJavaScript = "JSON.stringify(window.location)";
	ПараметрыМетода = Новый Структура("expression", ТекстJavaScript);
	ДанныеJSON = Новый Структура("id,method,params", 1, "Runtime.evaluate", ПараметрыМетода);
	КомандаJSON = ЗаписатьСтрокуJSON(ДанныеJSON);
	
	ВК.Пауза(1000);
	Ожидается.Тест().Что(ВК).Функц("ПослатьВебСокет", КомандаJSON).Получить("result", "result", "value").Получить("href").Равно(ИнтернетАдрес);
	
	ОшибочнаяКоманда = "[test:error}";
	Ожидается.Тест("Отправка ошибочного JSON").Что(ВК).Функц("ПослатьВебСокет", ОшибочнаяКоманда).JSON().Получить("error", "message").ИмеетТип("Строка");
	
	ДанныеJSON = Новый Структура("id,method,params", 1, "Vanessa.WebSocket", ПараметрыМетода);
	КомандаJSON = ЗаписатьСтрокуJSON(ДанныеJSON);
	Ожидается.Тест("Несуществующая команда").Что(ВК).Функц("ПослатьВебСокет", КомандаJSON).JSON().Получить("error", "message").ИмеетТип("Строка");
	
	Ожидается.Тест().Что(ВК).Проц("ЗакрытьВебСокет");
	НесуществующийАдрес = "ws://localhost:9222/unknownaddress/error";
	Ожидается.Тест("Открыть несуществующий адрес").Что(ВК).Функц("ОткрытьВебСокет", НесуществующийАдрес).JSON().Получить("error", "message").ИмеетТип("Строка");
	Ожидается.Тест("Отправка данных, сокет закрыт").Что(ВК).Функц("ПослатьВебСокет", КомандаJSON).JSON().Получить("error", "message").ИмеетТип("Строка");
	
	ПараметрыМетода = Новый Структура("format,quality,fromSurface", "png", 85, Ложь);
	ДанныеJSON = Новый Структура("id,method,params", 1, "Page.captureScreenshot", ПараметрыМетода);
	КомандаJSON = ЗаписатьСтрокуJSON(ДанныеJSON);
	Ожидается.Тест().Что(ВК).Функц("ВебСокет", АдресВебСокет, КомандаJSON).Получить("result", "data").Base64().ЭтоКартинка();
	
	Ожидается.Тест().Что(ВК).Проц("АктивироватьПроцесс", ИдентификаторПроцесса);
	
КонецПроцедуры

&НаКлиенте
Процедура Тест_ПоискФайлов(Ожидается) Экспорт
	
	ВК = Ожидается.Тест().Компонента("WindowsControl").Вернуть();
	
	ВременнаяПапка = ПолучитьИмяВременногоФайла();
	ВложеннаяПапка = ВременнаяПапка + "/Вложенная папка";
	УдалитьФайлы(ВременнаяПапка);
	СоздатьКаталог(ВременнаяПапка);
	СоздатьКаталог(ВложеннаяПапка);
	
	СвободноеМесто = Ожидается.Тест("Информация о диске").Что(ВК).Функц("СвободноеМестоНаДиске", ВременнаяПапка).Вернуть();
	Ожидается.Тест("Емкость диска").Что(СвободноеМесто).Получить("Capacity").ИмеетТип("Число");
	Ожидается.Тест("Свободное место").Что(СвободноеМесто).Получить("Free").ИмеетТип("Число");
	Ожидается.Тест("Доступное место").Что(СвободноеМесто).Получить("Available").ИмеетТип("Число");
	
	ИскомыйТекст = "Пример поиска Текста";
	СлучайныйТекстовыйФайл(Ожидается, ВременнаяПапка, "other.txt", "Произвольный текст");
	СлучайныйТекстовыйФайл(Ожидается, ВременнаяПапка, "upper.txt", ВРег(ИскомыйТекст));
	СлучайныйТекстовыйФайл(Ожидается, ВложеннаяПапка, "lower.tmp", НРег(ИскомыйТекст));
	СлучайныйТекстовыйФайл(Ожидается, ВложеннаяПапка, "simple.tmp", ИскомыйТекст);
	СлучайныйТекстовыйФайл(Ожидается, ВложеннаяПапка, "textfile.txt", ИскомыйТекст);
	
	ИмяФункции = "НайтиФайлы";
	Ожидается.Тест("С учётом регистра, маска *.*").Что(ВК).Функц(ИмяФункции, ВременнаяПапка, "*.*", ИскомыйТекст, Ложь).JSON().Функц("Количество").Равно(2);
	Ожидается.Тест("С учётом регистра, маска *.txt").Что(ВК).Функц(ИмяФункции, ВременнаяПапка, "*.txt", ИскомыйТекст, Ложь).JSON().Функц("Количество").Равно(1);
	Ожидается.Тест("Без учёта регистра, маска *.*").Что(ВК).Функц(ИмяФункции, ВременнаяПапка, "*.*", ИскомыйТекст, Истина).JSON().Функц("Количество").Равно(4);
	Ожидается.Тест("Без учёта регистра, маска *.txt").Что(ВК).Функц(ИмяФункции, ВременнаяПапка, "*.txt", ИскомыйТекст, Истина).JSON().Функц("Количество").Равно(2);
	Ожидается.Тест("Простой поиск по маске *.txt").Что(ВК).Функц(ИмяФункции, ВременнаяПапка, "*.txt").JSON().Функц("Количество").Равно(3);
	Ожидается.Тест("Простой поиск по маске *.*").Что(ВК).Функц(ИмяФункции, ВременнаяПапка).JSON().Функц("Количество").Равно(5);
	
КонецПроцедуры

&НаКлиенте
Процедура Тест_ЗапускПриложений(Ожидается) Экспорт
	
	ВК = Ожидается.Тест().Компонента("WindowsControl").Вернуть();
	
	ВременнаяПапка = ПолучитьИмяВременногоФайла();
	УдалитьФайлы(ВременнаяПапка);
	СоздатьКаталог(ВременнаяПапка);
	
	Команда = "notepad.exe";
	ИмяФайла = "testfile.txt";
	ПутьФайла = ВременнаяПапка + "\" + ИмяФайла;
	ПримерТекста = Ожидается.СлучайныйТекст();
	ИдентификаторПроцесса = Ожидается.Тест().Что(ВК).Функц("СоздатьПроцесс", Команда).Вернуть();
	ИдентификаторОкна = Ожидается.Тест("Список окон").Что(ВК).Проц("Пауза", 1000).Функц("ПолучитьСписокОкон", ИдентификаторПроцесса).Получить(0, "Window").Вернуть();
	Ожидается.Тест().Что(ВК).Проц("АктивироватьОкно", ИдентификаторОкна);
	
	Ожидается.Тест().Что(ВК).Проц("УстановитьПозициюОкна", ИдентификаторОкна, 100, 100);
	Ожидается.Тест().Что(ВК).Проц("УстановитьРазмерОкна", ИдентификаторОкна, 800, 600);
	Размеры = Ожидается.Тест().Что(ВК).Функц("ПолучитьРазмерОкна", ИдентификаторОкна).JSON().Вернуть();
	КурсорСлева = Размеры.Left + Размеры.Width / 2;
	КурсорСверху = Размеры.Top + 10;
	Ожидается.Тест().Что(ВК).Проц("УстановитьПозициюКурсора", КурсорСлева, КурсорСверху);
	Ожидается.Тест().Что(ВК).Проц("ЭмуляцияПеретаскивания", КурсорСлева + 100, КурсорСверху + 100, 100, 3);
	НовыеРазмеры = Ожидается.Тест().Что(ВК).Функц("ПолучитьРазмерОкна", ИдентификаторОкна).JSON().Вернуть();
	
	РазмерыСовпали = Истина
		И (Размеры.Left + 100 < НовыеРазмеры.Left + 5)
		И (Размеры.Left + 100 > НовыеРазмеры.Left - 5)
		И (Размеры.Top + 100 < НовыеРазмеры.Top + 5)
		И (Размеры.Top + 100 > НовыеРазмеры.Top - 5);
	
	Ожидается.Тест("Позиция окна ожидаемая").Что(РазмерыСовпали).ЕстьИстина();
	
	Ожидается.Тест().Что(ВК).Проц("АктивироватьОкно", ИдентификаторОкна).Проц("Пауза", 2000).Проц("ЭмуляцияНажатияКлавиши", "[27]");
	Ожидается.Тест("Эмуляция ввода текста").Что(ВК).Проц("Пауза", 2000).Проц("ЭмуляцияВводаТекста", ПримерТекста, 50);
	Ожидается.Тест("Вызов диалогового окна записи файла").Что(ВК).Проц("Пауза", 2000).Проц("ЭмуляцияНажатияКлавиши", "[17, 83]");
	Ожидается.Тест("Ввод имени файла в диалоге").Что(ВК).Проц("Пауза", 2000).Проц("ЭмуляцияВводаТекста", ПутьФайла, 50);
	Ожидается.Тест("Закрытие диалога записи файла").Что(ВК).Проц("Пауза", 2000).Проц("ЭмуляцияНажатияКлавиши", "[13]");
	Ожидается.Тест("Закрытие приложения").Что(ВК).Проц("Пауза", 2000).Проц("ЭмуляцияНажатияКлавиши", "[18, 115]").Проц("Пауза", 2000);
	Ожидается.Тест("Найти сохраненный файл").Что(ВК).Функц("НайтиФайлы", ВременнаяПапка, "*.*", ПримерТекста, Ложь).Получить(0, "name").Равно(ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура Тест_ФункционалGit(Ожидается) Экспорт
	
	ВК = Ожидается.Тест().Компонента("GitFor1C").Вернуть();
	
	ИмяПапки = "Autotest";
	ВременнаяПапка = ПолучитьИмяВременногоФайла("git");
	УдалитьФайлы(ВременнаяПапка);
	СоздатьКаталог(ВременнаяПапка);
	
	Репозиторий = ВременнаяПапка + "/" + ИмяПапки + "/";
	Подкаталог = Репозиторий + "test";
	СоздатьКаталог(Репозиторий);
	СоздатьКаталог(Подкаталог);
	
	АдресКлон = "https://github.com/lintest/AddinTemplate.git";
	ПапкаКлон = ВременнаяПапка + "clone";
	ФайлКлон = ПапкаКлон + "/LICENSE";
	
	ИмяФайла = "пример.txt";
	СлучайныйТекстовыйФайл(Ожидается, Репозиторий, ИмяФайла);
	
	Ожидается.Тест().Что(ВК).Получить("Version").ИмеетТип("Строка");
	Ожидается.Тест().Что(ВК).Проц("SetAuthor", "Автор", "author@lintest.ru");
	Ожидается.Тест().Что(ВК).Проц("SetCommitter", "Комиттер", "committer@lintest.ru");
	
	Ожидается.Тест("Клонирование репозитория").Что(ВК).Функц("clone", АдресКлон, ПапкаКлон).Успешно();
	Ожидается.Тест("Проверка сущестования файла").Что(ФайлСуществует(ФайлКлон)).ЕстьИстина();
	Ожидается.Тест("Информация о коммите").Что(ВК).Функц("info", "HEAD").Успешно();
	Репозитории = Ожидается.Тест().Что(ВК).Получить("remotes").Результат().ИмеетТип("Массив").Вернуть();
	Ожидается.Тест("Адрес репозитория").Что(Репозитории).Получить(0, "url").Равно(АдресКлон);
	Ожидается.Тест("Закрытие репозитория").Что(ВК).Функц("close").Успешно();
	
	Ожидается.Тест("Инициализация репозитория").Что(ВК).Функц("init", Репозиторий).Успешно();
	Ожидается.Тест("Статус рабочей области").Что(ВК).Функц("status").Результат().Получить("work", 0, "new_name").Равно(ИмяФайла);
	Ожидается.Тест("Добавление в индекс").Что(ВК).Функц("add", ИмяФайла).Успешно();
	Ожидается.Тест("Статус после добавления").Что(ВК).Функц("status").Результат().Получить("index", 0, "new_name").Равно(ИмяФайла);
	Ожидается.Тест("Первый коммит").Что(ВК).Функц("commit", "Инициализация").Успешно();
	Коммит = Ожидается.Тест("Информация о коммите").Что(ВК).Функц("info", "HEAD").Результат().Вернуть();
	Ожидается.Тест("Автор коммита").Что(Коммит).Получить("authorName").Равно("Автор");
	Ожидается.Тест("Комиттер коммита").Что(Коммит).Получить("committerName").Равно("Комиттер");
	Ожидается.Тест("Закрытие репозитория").Что(ВК).Функц("close").Успешно();
	
	Статус = Ожидается.Тест("Статус закрытого репозитория").Что(ВК).Функц("status").JSON().Вернуть();
	Ожидается.Тест("Статус получить не удалось").Что(Статус).Получить("success").Равно(Ложь);
	Ожидается.Тест("Код ошибки равен нулю").Что(Статус).Получить("error", "code").Равно(0);
	
	ИмяФайла = "текст.txt";
	СлучайныйТекстовыйФайл(Ожидается, Репозиторий, ИмяФайла);
	
	Статус = Ожидается.Тест("Поиск репозитория").Что(ВК).Функц("find", Подкаталог).Успешно().JSON().Вернуть();
	Ожидается.Тест("Открытие репозитория").Что(ВК).Функц("open", Статус.result).Успешно();
	Ожидается.Тест("Статус рабочей области").Что(ВК).Функц("status").Результат().Получить("work", 0, "new_name").Равно(ИмяФайла);
	Ожидается.Тест("Добавление в индекс").Что(ВК).Функц("add", ИмяФайла).Успешно();
	Ожидается.Тест("Статус после добавления").Что(ВК).Функц("status").Результат().Получить("index", 0, "new_name").Равно(ИмяФайла);
	Ожидается.Тест("Второй коммит").Что(ВК).Функц("commit", "Второй коммит").Успешно();
	Ожидается.Тест("Получение истории").Что(ВК).Функц("history").Результат().ИмеетТип("Массив").Функц("Количество").Равно(2);
	Ожидается.Тест("Создание новой ветки").Что(ВК).Функц("checkout", "develop", Истина).Успешно();
	Ожидается.Тест("Список веток").Что(ВК).Получить("branches").Результат().ИмеетТип("Массив").Функц("Количество").Равно(2);
	
	СлучайныйТекстовыйФайл(Ожидается, Репозиторий, ИмяФайла);
	Ожидается.Тест("Добавление в индекс").Что(ВК).Функц("add", ИмяФайла).Успешно();
	Ожидается.Тест("Статус после добавления").Что(ВК).Функц("status").Результат().Получить("index", 0, "new_name").Равно(ИмяФайла);
	Ожидается.Тест("Удаление из индекса").Что(ВК).Функц("reset", ИмяФайла).Успешно();
	Ожидается.Тест("Статус после удаления").Что(ВК).Функц("status").Результат().Получить("work", 0, "new_name").Равно(ИмяФайла);
	Ожидается.Тест("Отмена изменений").Что(ВК).Функц("discard", ИмяФайла).Успешно();
	Ожидается.Тест("Статус после отмены").Что(ВК).Функц("status").Результат().Равно(Неопределено);
	
	СлучайныйТекстовыйФайл(Ожидается, Репозиторий, ИмяФайла);
	Ожидается.Тест("Добавление в индекс").Что(ВК).Функц("add", ИмяФайла).Успешно();
	Ожидается.Тест("Третий коммит").Что(ВК).Функц("commit", "Третий коммит").Успешно();
	Ожидается.Тест("Указатель HEAD").Что(ВК).Получить("head").Результат().Равно("refs/heads/develop");
	Ожидается.Тест("Переключение ветки").Что(ВК).Функц("checkout", "master").Успешно();
	Ожидается.Тест("Указатель HEAD").Что(ВК).Получить("head").Результат().Равно("refs/heads/master");
	
КонецПроцедуры

&НаКлиенте
Процедура Тест_УвеличениеЭкрана(Ожидается) Экспорт
	
	ВК = Ожидается.Тест().Компонента("WindowsControl").Вернуть();
	
	ИдентификаторОкна = Ожидается.Тест().Что(ВК).Получить("АктивноеОкно").Вернуть();
	СвойстваДисплея = Ожидается.Тест().Что(ВК).Функц("ПолучитьСвойстваДисплея", ИдентификаторОкна).JSON().Вернуть();
	
	X = СвойстваДисплея.Width / 4;
	Y = СвойстваДисплея.Height / 4;
	W = СвойстваДисплея.Width / 2;
	H = СвойстваДисплея.Height / 2;
	
	Ожидается.Тест().Что(ВК).Проц("УстановитьРазмерОкна", ИдентификаторОкна, W, H);
	Ожидается.Тест().Что(ВК).Проц("УстановитьПозициюОкна", ИдентификаторОкна, X, Y);
	Ожидается.Тест().Что(ВК).Проц("УстановитьПозициюКурсора", X * 3 / 2, Y * 3 / 2);
	СнимокОбласти = Ожидается.Тест().Что(ВК).Функц("ПолучитьСнимокОбласти", X, Y, X, Y).ЭтоКартинка().Вернуть();
	УвеличенныйСнимок = Ожидается.Тест().Что(ВК).Функц("МасштабироватьИзображение", СнимокОбласти, 2).ЭтоКартинка().Вернуть();
	
	Ожидается.Тест().Что(ВК).Проц("ПоказатьУвеличение", X / 3, Y / 3, W, H, 2);
	Ожидается.Тест().Что(ВК).Проц("Пауза", 500);
	Координаты = Ожидается.Тест().Что(ВК).Функц("НайтиНаЭкране", УвеличенныйСнимок).JSON().Вернуть();
	Ожидается.Тест("Фрагмент увеличения найден").Что(Координаты).Получить("Match").Больше(0.9);
	Ожидается.Тест("Левый угол увеличения").Что(Координаты).Получить("Left").Меньше(W / 3);
	Ожидается.Тест("Верхний угол увеличения").Что(Координаты).Получить("Top").Меньше(H / 3);
	
	Ожидается.Тест().Что(ВК).Проц("СкрытьУвеличение");
	Ожидается.Тест().Что(ВК).Проц("Пауза", 500);
	Координаты = Ожидается.Тест().Что(ВК).Функц("НайтиНаЭкране", СнимокОбласти).JSON().Вернуть();
	Ожидается.Тест("Фрагмент окна найден").Что(Координаты).Получить("Match").Больше(0.9);
	Ожидается.Тест("Левый угол окна").Что(Координаты).Получить("Left").Больше(W / 3);
	Ожидается.Тест("Верхний угол окна").Что(Координаты).Получить("Top").Больше(H / 3);
	
КонецПроцедуры

&НаКлиенте
Процедура Тест_УправлениеПриложением(Ожидается) Экспорт
	
	ВК = Ожидается.Тест().Компонента("WindowsControl").Вернуть();
	ВременнаяПапка = ПолучитьИмяВременногоФайла();
	УдалитьФайлы(ВременнаяПапка);
	СоздатьКаталог(ВременнаяПапка);
	
	Команда = "charmap.exe";
	ИдентификаторПроцесса = Ожидается.Тест().Что(ВК).Функц("СоздатьПроцесс", Команда).Вернуть();
	Ожидается.Тест().Что(ВК).Проц("Пауза", 3000).Вернуть();
	ДеревоЭлементов = Ожидается.Тест().Что(ВК).Функц("ПолучитьЭлементы", ИдентификаторПроцесса).JSON().Вернуть();
	ЭлементыИнтерфейса = Ожидается.Тест().Что(ДеревоЭлементов).Получить("Tree").Вернуть();
	ИдентификаторФормы = Ожидается.Тест().Что(ДеревоЭлементов).Получить("Id").Вернуть();
	Для каждого ЭлементКоллекции Из ЭлементыИнтерфейса Цикл
		ИдКнопки = ЭлементКоллекции.AutomationId;
		Если ИдКнопки = "103" Тогда
			ИмяДействия = "Нажать кнопку: " + ЭлементКоллекции.Name;
			Ожидается.Тест(ИмяДействия).Что(ВК).Функц("ВызватьЭлемент", ЭлементКоллекции.Id);
			Ожидается.Тест().Что(ВК).Проц("Пауза", 100);
			Ожидается.Тест().Что(ВК).Проц("УстановитьПозициюКурсора", ЭлементКоллекции.X, ЭлементКоллекции.Y);
			Ожидается.Тест().Что(ВК).Проц("ЭмуляцияНажатияМыши", 0);
			Ожидается.Тест().Что(ВК).Проц("Пауза", 100);
		КонецЕсли;
		Если ИдКнопки = "107" Тогда
			ИмяТекста = ЭлементКоллекции.Name;
			ИдентификаторТекста = ЭлементКоллекции.Id;
		КонецЕсли;
	КонецЦикла;
	
	ОтборЭлементов = Новый Структура("ProcessId,Name,ControlType", ИдентификаторПроцесса, ИмяТекста, "Edit");
	Ожидается.Тест("Получить значение элемента").Что(ВК).Функц("НайтиЭлементы", ЗаписатьСтрокуJSON(ОтборЭлементов)).Получить(0, "Value").Сокр().Равно("!!");
	
	ИмяКнопки = Неопределено;
	КнопкаЗакрытия = Неопределено;
	ИдентификаторРодителя = Неопределено;
	Для каждого ЭлементКоллекции Из ЭлементыИнтерфейса Цикл
		Если ЭлементКоллекции.Type = "TitleBar" Тогда
			ИдентификаторРодителя = ЭлементКоллекции.Id;
			Ном = ЭлементКоллекции.Tree.Количество() - 1;
			КнопкаЗакрытия = ЭлементКоллекции.Tree[Ном];
			ИдентификаторКнопки = КнопкаЗакрытия.Id;
			ИмяКнопки = КнопкаЗакрытия.Name;
			X = КнопкаЗакрытия.X;
			Y = КнопкаЗакрытия.Y;
		КонецЕсли;
	КонецЦикла;
	
	Ожидается.Тест().Что(ВК).Функц("ЭлементПоКоординатам", X, Y).Получить("Name").Равно(ИмяКнопки);
	
	ОтборЭлементов = ЗаписатьСтрокуJSON(Новый Структура("ProcessId,Name,ControlType", ИдентификаторПроцесса, "", КнопкаЗакрытия.Type));
	Ожидается.Тест().Что(ВК).Функц("НайтиЭлементы", ОтборЭлементов).Равно("null");
	
	ОтборЭлементов = ЗаписатьСтрокуJSON(Новый Структура("ProcessId,ControlType", ИдентификаторПроцесса, КнопкаЗакрытия.Type));
	Ожидается.Тест().Что(ВК).Функц("НайтиЭлементы", ОтборЭлементов).JSON().Функц("Количество").Больше(1);
	
	ОтборЭлементов = ЗаписатьСтрокуJSON(Новый Структура("ProcessId,Name,ControlType", ИдентификаторПроцесса, ИмяКнопки, КнопкаЗакрытия.Type));
	Ожидается.Тест().Что(ВК).Функц("НайтиЭлементы", ОтборЭлементов).Получить(0, "Name").Равно(ИмяКнопки);
	
	ОтборЭлементов = ЗаписатьСтрокуJSON(Новый Структура("ProcessId,Name", ИдентификаторПроцесса, ИмяКнопки));
	Ожидается.Тест().Что(ВК).Функц("НайтиЭлементы", ОтборЭлементов).Получить(0, "Name").Равно(ИмяКнопки);
	
	ОтборЭлементов = ЗаписатьСтрокуJSON(Новый Структура("Parent,Name", ИдентификаторРодителя, ИмяКнопки));
	Ожидается.Тест().Что(ВК).Функц("НайтиЭлементы", ОтборЭлементов).Получить(0, "Name").Равно(ИмяКнопки);
	
	ОтборЭлементов = ЗаписатьСтрокуJSON(Новый Структура("Parent,Name", ИдентификаторФормы, ИмяКнопки));
	Ожидается.Тест().Что(ВК).Функц("НайтиЭлементы", ОтборЭлементов).Получить(0, "Name").Равно(ИмяКнопки);
	
	Ожидается.Тест().Что(ВК).Функц("ПолучитьРодителяЭлемента", ИдентификаторРодителя).Получить("Id").Равно(ИдентификаторФормы);
	Ожидается.Тест().Что(ВК).Функц("ПолучитьРодителяЭлемента", ИдентификаторКнопки).Получить("Type").Равно("TitleBar");
	
	ИдентификаторОкна = Ожидается.Тест("Идентификатор oкна").Что(ВК).Функц("ПолучитьСписокОкон", ИдентификаторПроцесса).Получить(0, "Window").Вернуть();
	ЗаголовокОкна = Ожидается.Тест("Заголовок окна").Что(ВК).Функц("ПолучитьСвойстваОкна", ИдентификаторОкна).Получить("Title").Вернуть();
	
	ОтборЭлементов = ЗаписатьСтрокуJSON(Новый Структура("ProcessId,Name", ИдентификаторПроцесса, ИмяКнопки));
	Ожидается.Тест().Что(ВК).Функц("НайтиЭлементы", ОтборЭлементов).Получить(0, "Window").Равно(ЗаголовокОкна);
	Ожидается.Тест("Нажать кнопку: " + ИмяКнопки).Что(ВК).Функц("ВызватьЭлемент", КнопкаЗакрытия.Id);
	
КонецПроцедуры

#КонецОбласти

#Область GherkinParser

&НаКлиенте
Процедура Тест_ПарсингЗаголовковФичи(Ожидается) Экспорт

	ВК = Ожидается.Тест().Компонента("GherkinParser").Установить("КлючевыеСлова", ПолучитьКлючевыеСлова(Ожидается)).Вернуть();
	
	ТекстСценария =
	"# language: ru
	|# encoding: utf-8
	|# Пример комментария
	|# Второй комментарий
	|@tree
	|@TagValue
	|Функциональность: Автотест №1
	|  Описание функционала
	|  простого сценария
	|";
	
	
	ДанныеФайла = Ожидается.Тест("Парсинг строки").Что(ВК).Функц("ПрочитатьТекст", ТекстСценария).JSON().Вернуть();
	
	Ожидается.Тест("Язык сценария").Что(ДанныеФайла).Получить("language").Равно("ru");
	ДанныеФичи = Ожидается.Тест("Данные фичи").Что(ДанныеФайла).Получить("feature").Вернуть();
	Ожидается.Тест("Заголовок фичи").Что(ДанныеФичи).Получить("name").Равно("Автотест №1");
	
	Ожидается.Тест("Пример комментария").Что(ДанныеФичи).Получить("comments", 0, "text").Равно("Пример комментария");
	Ожидается.Тест("Второй комментарий").Что(ДанныеФичи).Получить("comments", 1, "text").Равно("Второй комментарий");
	
	Ожидается.Тест("Первый тег @tree").Что(ДанныеФичи).Получить("tags", 0, "text").Равно("tree");
	Ожидается.Тест("Второй тег @TagValue").Что(ДанныеФичи).Получить("tags", 1, "text").Равно("TagValue");
	
	Ожидается.Тест("Первая строка описания").Что(ДанныеФичи).Получить("description", 0, "text").Равно("Описание функционала");
	Ожидается.Тест("Вторая строка описания").Что(ДанныеФичи).Получить("description", 1, "text").Равно("простого сценария");
	
	ВременныйФайл = ПолучитьИмяВременногоФайла();
	ЗаписьТекста = Новый ЗаписьТекста(ВременныйФайл, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(ТекстСценария);
	ЗаписьТекста.Закрыть();
	
	Ожидается.Тест("Парсинг файла сценария").Что(ВК).Функц("ПрочитатьФайл", ВременныйФайл).Получить("feature").Получить("name").Равно("Автотест №1");
	УдалитьФайлы(ВременныйФайл);
	
КонецПроцедуры

&НаКлиенте
Процедура Тест_ПарсингПримитивногоСценария(Ожидается) Экспорт
	
	ВК = Ожидается.Тест().Компонента("GherkinParser").Установить("КлючевыеСлова", ПолучитьКлючевыеСлова(Ожидается)).Вернуть();
	
	Ожидается.Тест().Что(ВК).Получить("ЭкранируемыеСимволы").Равно("");
	
	ТекстСценария =
	"@ТегФичи
	|Функциональность: Параметры шага
	|@ТегКонтекста
	|Контекст: 
	|	И здесь 'Параметр\' кавычки' текст 'Значение'
	|	И здесь ""Параметр\"" кавычки"" текст ""Значение""
	|	И здесь <Параметр\> скобка> текст <Значение>
	|	И здесь ""Перенос\nстроки"" текст <Параметр>
	|	И здесь ""Символ\tтабуляции"" текст ""Знак""
	|	И здесь ""Обратный \\ слэш и разделитель\|""
	|	И здесь ""Прямой \/ слэш""
	|	И здесь 20.01.2021 дата
	|	И здесь 21/03/2020 дата
	|	И здесь 18743.5 число с точкой
	|	И здесь 854,54 число с запятой
	|	И здесь 24868 число целое
	|	И здесь -84,123456789 число отрицательное
	|	И это `""1""` текст
	|	И символы №Ω₯‰‼∑∏☺☻♀♂
	|Сценарий: Передать <Параметр> в сценарий №1
	|	И здесь <Параметр> и 20.01.2021, 3 параметра
	|@ОшибочныйТег
	|";
	
	
	ДанныеФайла = Ожидается.Тест("Парсинг строки").Что(ВК).Функц("ПрочитатьТекст", ТекстСценария).JSON().Вернуть();
	Ожидается.Тест("Количество тегов").Что(ДанныеФайла).Получить("feature", "tags").Функц("Количество").Равно(1);
	Ожидается.Тест("Тег фичи").Что(ДанныеФайла).Получить("feature", "tags", 0, "text").Равно("ТегФичи");
	Ожидается.Тест("Тег контекста").Что(ДанныеФайла).Получить("background", "tags", 0, "text").Равно("ТегКонтекста");
	
	СписокШагов = Ожидается.Тест("Список шагов").Что(ДанныеФайла).Получить("background", "steps").Вернуть();
	Ожидается.Тест("Одинарные кавычки").Что(СписокШагов).Получить(0, "tokens", 2, "text").Равно("Параметр' кавычки");
	Ожидается.Тест("Двойные кавычки").Что(СписокШагов).Получить(1, "tokens", 2, "text").Равно("Параметр"" кавычки");
	Ожидается.Тест("Угловые скобки").Что(СписокШагов).Получить(2, "tokens", 2, "text").Равно("Параметр> скобка");
	Ожидается.Тест("Перенос строки").Что(СписокШагов).Получить(3, "tokens", 2, "text").Равно("Перенос" + Символы.ПС + "строки");
	Ожидается.Тест("Символ табуляции").Что(СписокШагов).Получить(4, "tokens", 2, "text").Равно("Символ" + Символы.Таб + "табуляции");
	Ожидается.Тест("Обратный слэш").Что(СписокШагов).Получить(5, "tokens", 2, "text").Равно("Обратный \ слэш и разделитель|");
	Ожидается.Тест("Прямой слэш").Что(СписокШагов).Получить(6, "tokens", 2, "text").Равно("Прямой / слэш");

	Ожидается.Тест("Символ: одинарные кавычки").Что(СписокШагов).Получить(0, "tokens", 2, "symbol").Равно("'");
	Ожидается.Тест("Символ: двойные кавычки").Что(СписокШагов).Получить(1, "tokens", 2, "symbol").Равно("""");
	Ожидается.Тест("Параметр число").Что(СписокШагов).Получить(7, "tokens", 2, "type").Равно("Date");
	Ожидается.Тест("Параметр дата").Что(СписокШагов).Получить(7, "tokens", 2, "text").Равно("20.01.2021");
	Ожидается.Тест("Параметр число").Что(СписокШагов).Получить(8, "tokens", 2, "type").Равно("Date");
	Ожидается.Тест("Параметр дата").Что(СписокШагов).Получить(8, "tokens", 2, "text").Равно("21/03/2020");
	Ожидается.Тест("Параметр число").Что(СписокШагов).Получить(9, "tokens", 2, "type").Равно("Number");
	Ожидается.Тест("Параметр число").Что(СписокШагов).Получить(9, "tokens", 2, "text").Равно(18743.5);
	Ожидается.Тест("Параметр число").Что(СписокШагов).Получить(10, "tokens", 2, "text").Равно(854.54);
	Ожидается.Тест("Параметр число").Что(СписокШагов).Получить(10, "tokens", 2, "type").Равно("Number");
	Ожидается.Тест("Параметр число").Что(СписокШагов).Получить(11, "tokens", 2, "text").Равно(24868);
	Ожидается.Тест("Параметр число").Что(СписокШагов).Получить(11, "tokens", 2, "type").Равно("Number");
	Ожидается.Тест("Параметр число").Что(СписокШагов).Получить(12, "tokens", 2, "text").Равно(-84.123456789);
	Ожидается.Тест("Параметр число").Что(СписокШагов).Получить(12, "tokens", 2, "type").Равно("Number");
	Ожидается.Тест("Параметр строка ").Что(СписокШагов).Получить(13, "tokens", 2, "text").Равно("""1""");
	Ожидается.Тест("Символы в строке").Что(СписокШагов).Получить(14, "tokens", 2, "text").Равно("№");
	Ожидается.Тест("Символы в строке").Что(СписокШагов).Получить(14, "tokens", 3, "text").Равно("Ω");
	Ожидается.Тест("Символы в строке").Что(СписокШагов).Получить(14, "tokens", 4, "text").Равно("₯");

	ЭкранируемыеСимволы = "nrt|""'";
	Ожидается.Тест().Что(ВК).Установить("ЭкранируемыеСимволы", ЭкранируемыеСимволы).Получить("ЭкранируемыеСимволы").Равно(ЭкранируемыеСимволы);
	ДанныеФайла = Ожидается.Тест("Парсинг строки").Что(ВК).Функц("Прочитать", ТекстСценария).JSON().Вернуть();
	СписокШагов = Ожидается.Тест("Список шагов").Что(ДанныеФайла).Получить("background", "steps").Вернуть();
	Ожидается.Тест("Одинарные кавычки").Что(СписокШагов).Получить(0, "tokens", 2, "text").Равно("Параметр' кавычки");
	Ожидается.Тест("Двойные кавычки").Что(СписокШагов).Получить(1, "tokens", 2, "text").Равно("Параметр"" кавычки");
	Ожидается.Тест("Перенос строки").Что(СписокШагов).Получить(3, "tokens", 2, "text").Равно("Перенос" + Символы.ПС + "строки");
	Ожидается.Тест("Символ табуляции").Что(СписокШагов).Получить(4, "tokens", 2, "text").Равно("Символ" + Символы.Таб + "табуляции");
	Ожидается.Тест("Обратный слэш").Что(СписокШагов).Получить(5, "tokens", 2, "text").Равно("Обратный \\ слэш и разделитель|");
	Ожидается.Тест("Прямой слэш").Что(СписокШагов).Получить(6, "tokens", 2, "text").Равно("Прямой \/ слэш");

	Ожидается.Тест().Что(ВК).Установить("ЭкранируемыеСимволы", "").Получить("ЭкранируемыеСимволы").Равно("");
	
	Сценарий = Ожидается.Тест("Список шагов").Что(ДанныеФайла).Получить("scenarios", 0).Вернуть();
	Ожидается.Тест("Заголовок сценария").Что(Сценарий).Получить("name").Равно("Передать <Параметр> в сценарий №1");
	Ожидается.Тест("Параметр сценария").Что(Сценарий).Получить("params", 0, "text").Равно("Параметр");
	ШагСценария = Ожидается.Тест("Шаги сценария").Что(Сценарий).Получить("steps", 0).Вернуть();
	Ожидается.Тест("Параметры шага").Что(ШагСценария).Получить("params").Функц("Количество").Равно(3);
	Ожидается.Тест("Параметры 1").Что(ШагСценария).Получить("params", 0, "text").Равно("Параметр");
	Ожидается.Тест("Параметры 2").Что(ШагСценария).Получить("params", 1, "text").Равно("20.01.2021");
	Ожидается.Тест("Параметры 3").Что(ШагСценария).Получить("params", 2, "text").Равно(3);

КонецПроцедуры

&НаКлиенте
Процедура Тест_ИспользованиеГрупп(Ожидается) Экспорт
	
	ВК = Ожидается.Тест().Компонента("GherkinParser").Установить("КлючевыеСлова", ПолучитьКлючевыеСлова(Ожидается)).Вернуть();
	
	Ожидается.Тест().Что(ВК).Получить("ЭкранируемыеСимволы").Равно("");
	
	ТекстСценария =
	"Функциональность: Групы
	|Сценарий: Группировка
	|	* Первая группа
	|		И пауза 1
	|		И пауза 1
	|	*
	|		И пауза 1
	|	* Третья группа
	|		И пауза 1
	|		И пауза 1
	|";
	
	
	ДанныеФайла = Ожидается.Тест("Парсинг строки").Что(ВК).Функц("ПрочитатьТекст", ТекстСценария);
	ГруппыСценария = ДанныеФайла.Получить("scenarios", 0, "steps").Вернуть();
	Ожидается.Тест("Количество групп").Что(ГруппыСценария).Функц("Количество").Равно(3);
	Ожидается.Тест("Первая группа").Что(ГруппыСценария).Получить(0, "name").Равно("Первая группа");
	Ожидается.Тест("Пустая группа").Что(ГруппыСценария).Получить(1, "name").Равно("");
	Ожидается.Тест("Третья группа").Что(ГруппыСценария).Получить(2, "name").Равно("Третья группа");

КонецПроцедуры

&НаКлиенте
Процедура Тест_СценарийНаАнглийскомЯзыке(Ожидается) Экспорт
	
	ВК = Ожидается.Тест().Компонента("GherkinParser").Установить("КлючевыеСлова", ПолучитьКлючевыеСлова(Ожидается)).Вернуть();
	
	ТекстСценария =
	"# language: en
	|@tree
	|
	|Feature: Purchase some staff
	|
	|	As a customer
	|	I want to purchase some goods
	|	To be happy with it
	|
	|Background:
	|	Given TestClient is connected
	|	И русские ключевые слова игнорируются
	|
	|Scenario: Create purchase order	
	|	When I start to make document
	|			When I create new purchase order	
	|			Then I choose vendor 'Norcal Distribution Company'
	|			
	|	And I add some goods		
	|			And I add new line in order
	|			And I choose item ""Coleman 600W Wind Turbine""
	|			And I choose quantity 1
	|			And I choose delivery date 30.10.2016
	|			
	|	And I finish my document		
	|			And I save the order
	|			And I print the order
	|";
	
	ДанныеФайла = Ожидается.Тест("Парсинг строки").Что(ВК).Функц("Прочитать", ТекстСценария).JSON().Вернуть();
	Ожидается.Тест("Язык сценария").Что(ДанныеФайла).Получить("language").Равно("en");
	ДанныеФичи = Ожидается.Тест("Данные фичи").Что(ДанныеФайла).Получить("feature").Вернуть();
	Ожидается.Тест("Заголовок фичи").Что(ДанныеФичи).Получить("name").Равно("Purchase some staff");
	
	ШагиКонтекста = Ожидается.Тест("Шаги контекста").Что(ДанныеФайла).Получить("background", "steps").Вернуть();
	Ожидается.Тест("Это ключевое слово").Что(ШагиКонтекста).Получить(0, "tokens", 0, "type").Равно("Keyword");
	Ожидается.Тест("Тип ключевого слова").Что(ШагиКонтекста).Получить(0, "keyword", "type").Равно("given");
	Ожидается.Тест("Текст на русском").Что(ШагиКонтекста).Получить(1, "name").Равно("И русские ключевые слова игнорируются");
	
	Ожидается.Тест("Заголовок сценария").Что(ДанныеФайла).Получить("scenarios", 0, "name").Равно("Create purchase order");
	ШагиСценария = Ожидается.Тест("Разбор сценария").Что(ДанныеФайла).Получить("scenarios", 0, "steps").Вернуть();
	Ожидается.Тест("Шаги первого уровня").Что(ШагиСценария).Функц("Количество").Равно(3);
	Ожидается.Тест("Шаги второго уровня").Что(ШагиСценария).Получить(0, "steps").Функц("Количество").Равно(2);
	
КонецПроцедуры

&НаКлиенте
Процедура Тест_СоставныеКлючевыеСлова(Ожидается) Экспорт
	
	МассивСлов = Новый Массив;
	МассивСлов.Добавить("И");
	МассивСлов.Добавить("И это");
	МассивСлов.Добавить("И здесь");
	МассивСлов.Добавить("И тогда");
	МассивСлов.Добавить("И это значит");
	МассивСлов.Добавить("Тогда получится");
	МассивСлов.Добавить("Тогда");
	МассивСлов.Добавить("Когда");
	МассивСлов.Добавить("Всегда");
	
	Функционал = Новый Массив;
	Функционал.Добавить("Тестируемый функционал");
	
	Контекст = Новый Массив;
	Контекст.Добавить("Контекст сценария");
	
	ТипСлова = "w" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
	РусскиеСлова = Новый Структура("feature,background," + ТипСлова, Функционал, Контекст, МассивСлов);
	
	КлючевыеСлова = Новый Структура("ru", РусскиеСлова);
	КлючевыеСлова = ЗаписатьСтрокуJSON(КлючевыеСлова);
	
	ВК = Ожидается.Тест().Компонента("GherkinParser").Установить("КлючевыеСлова", КлючевыеСлова).Вернуть();
	СловаКомпоненты = Ожидается.Тест().Что(ВК).Получить("КлючевыеСлова").Получить("ru").Вернуть();
	Ожидается.Тест().Что(СловаКомпоненты).Получить("feature", 0).Равно(РусскиеСлова["feature"][0]);
	Ожидается.Тест().Что(СловаКомпоненты).Получить("background", 0).Равно(РусскиеСлова["background"][0]);
	Ожидается.Тест().Что(СловаКомпоненты).Получить(ТипСлова).Функц("Количество").Равно(РусскиеСлова[ТипСлова].Количество());
	
	ТекстСценария =
	"Тестируемый функционал: Ключевые слова
	|
	|Контекст сценария:
	|	КОГДА я начинаю тест
	|	ТОГДА можно использовать свои слова
	|	И это значит я добавляю новые строки
	|	И это я решаю какими они должны быть
	|	И тогда можно их использовать всегда
	|	И здесь я вижу новые возможности
	|	тогДА полУчитСЯ понятный текст
	|";
	
	ДанныеФайла = Ожидается.Тест("Парсинг строки").Что(ВК).Функц("Прочитать", ТекстСценария).JSON().Вернуть();
	СписокШагов = Ожидается.Тест("Список шагов").Что(ДанныеФайла).Получить("background", "steps").Вернуть();
	
	Ожидается.Тест("Пользовательский тип ключевого слова").Что(СписокШагов).Получить(0, "keyword", "type").Равно(ТипСлова);
	Ожидается.Тест("Простое ключевое слово").Что(СписокШагов).Получить(0, "keyword", "text").Равно("Когда");
	Ожидается.Тест("Простое ключевое слово").Что(СписокШагов).Получить(1, "keyword", "text").Равно("Тогда");
	Ожидается.Тест("Слово внутри шага").Что(СписокШагов).Получить(0, "tokens", 1, "type").Равно("Operator");
	Ожидается.Тест("Составное ключевое слово").Что(СписокШагов).Получить(2, "keyword", "text").Равно("И это значит");
	Ожидается.Тест("Элемент ключевого слова").Что(СписокШагов).Получить(2, "tokens", 2, "type").Равно("Keyword");
	Ожидается.Тест("Элемент ключевого слова").Что(СписокШагов).Получить(2, "tokens", 2, "text").Равно("значит");
	Ожидается.Тест("После ключевого слова").Что(СписокШагов).Получить(2, "tokens", 3, "type").Равно("Operator");
	Ожидается.Тест("После ключевого слова").Что(СписокШагов).Получить(2, "tokens", 3, "text").Равно("я");
	Ожидается.Тест("Регистр не имеет значения").Что(СписокШагов).Получить(6, "keyword", "text").Равно("Тогда получится");
	
КонецПроцедуры

&НаКлиенте
Процедура Тест_МногострочныеПараметры(Ожидается) Экспорт
	
	ВК = Ожидается.Тест().Компонента("GherkinParser").Установить("КлючевыеСлова", ПолучитьКлючевыеСлова(Ожидается)).Вернуть();
	
	ТекстСценария =
	"# language: ru
	|Функциональность: Многострочность
	|	""""""
	|	Первая строка ||``\\
	|
	|	Строка с кавычкой ""
	|	""""""
	|	""""""text
	|	Первая строка \n\n\n
	|	Строка с кавычкой ""
	|
	|	""""""
	|	#Комментарий
	|	```
	|	Апостроф `
	|	```
	|
	|
	|	```empty
	|	```
	|";
	
	ДанныеФайла = Ожидается.Тест("Парсинг строки").Что(ВК).Функц("ПрочитатьТекст", ТекстСценария).JSON().Вернуть();
	
	Ожидается.Тест("Язык сценария").Что(ДанныеФайла).Получить("language").Равно("ru");
	ТестируемыйМассив = Ожидается.Тест("Данные фичи").Что(ДанныеФайла).Получить("feature", "multilines").Вернуть();
	
	Многострочник = Ожидается.Тест("Многострочник с кавычками").Что(ТестируемыйМассив).Получить(0).Вернуть();
	Ожидается.Тест("Шапка многострочника 1").Что(Многострочник).Получить("header", "text").Равно("""""""");
	Ожидается.Тест("Номер строки шапки 1").Что(Многострочник).Получить("header", "line").Равно(3);
	Ожидается.Тест("Количество строк = 3").Что(Многострочник).Получить("lines").Функц("Количество").Равно(3);
	Ожидается.Тест("Текст многострочника 1.1").Что(Многострочник).Получить("lines", 0, "text").Равно("Первая строка ||``\\");
	Ожидается.Тест("Текст многострочника 1.2").Что(Многострочник).Получить("lines", 1).Ошибка().Получить("text");
	Ожидается.Тест("Текст многострочника 1.3").Что(Многострочник).Получить("lines", 2, "text").Равно("Строка с кавычкой """);
	Ожидается.Тест("Подвал многострочника 1").Что(Многострочник).Получить("footer", "text").Равно("""""""");
	
	Многострочник = Ожидается.Тест("Многострочник с типом текста").Что(ТестируемыйМассив).Получить(1).Вернуть();
	Ожидается.Тест("Количество строк = 3").Что(Многострочник).Получить("lines").Функц("Количество").Равно(3);
	Ожидается.Тест("Шапка многострочника 2").Что(Многострочник).Получить("header", "text").Равно("""""""text");
	Ожидается.Тест("Текст многострочника 2.1").Что(Многострочник).Получить("lines", 0, "text").Равно("Первая строка \n\n\n");
	Ожидается.Тест("Текст многострочника 2.2").Что(Многострочник).Получить("lines", 1, "text").Равно("Строка с кавычкой """);
	Ожидается.Тест("Текст многострочника 2.3").Что(Многострочник).Получить("lines", 2).Ошибка().Получить("text");
	Ожидается.Тест("Подвал многострочника 2").Что(Многострочник).Получить("footer", "text").Равно("""""""");
	
	Многострочник = Ожидается.Тест("Многострочник с апострофами").Что(ТестируемыйМассив).Получить(2).Вернуть();
	Ожидается.Тест("Количество строк = 1").Что(Многострочник).Получить("lines").Функц("Количество").Равно(1);
	Ожидается.Тест("Шапка многострочника 3").Что(Многострочник).Получить("header", "text").Равно("```");
	Ожидается.Тест("Текст многострочника 3").Что(Многострочник).Получить("lines", 0, "text").Равно("Апостроф `");
	Ожидается.Тест("Подвал многострочника 3").Что(Многострочник).Получить("footer", "text").Равно("```");
	
	Многострочник = Ожидается.Тест("Пустой многострочник").Что(ТестируемыйМассив).Получить(3).Вернуть();
	Ожидается.Тест("Строки отсутствуют").Что(Многострочник).Ошибка().Получить("lines");
	Ожидается.Тест("Шапка многострочника 4").Что(Многострочник).Получить("header", "text").Равно("```empty");
	Ожидается.Тест("Подвал многострочника 4").Что(Многострочник).Получить("footer", "text").Равно("```");
	
КонецПроцедуры

&НаКлиенте
 Процедура Тест_НесколькоСценариев(Ожидается) Экспорт
	
	ВК = Ожидается.Тест().Компонента("GherkinParser").Установить("КлючевыеСлова", ПолучитьКлючевыеСлова(Ожидается)).Вернуть();
	
	Ожидается.Тест().Что(ВК).Установить("ЭкранируемыеСимволы", "nrt|""'");
	
	ТекстСценария =
	"Функционал: Сценарии
	|	Несколько сценариев
	|	в одном файле
	|
	|Контекст: 
	|	Допустим я зачем-то стартую тесты
	|
	|@ТегСценария1
	|Сценарий: Один шаг
	|	Когда я начинаю движение
	|	Тогда я делаю 1 шаг
	|
	|@ТегСценария2
	|Сценарий: Наблюдатель
	|	Если я открываю окно
	|		Затем я смотрю вдаль
	|		Тогда я вижу цель
	|";
	
	
	ДанныеФайла = Ожидается.Тест("Парсинг строки").Что(ВК).Функц("Прочитать", ТекстСценария).JSON().Вернуть();
	Ожидается.Тест("Сниппет первого шага контекста").Что(ДанныеФайла).Получить("background", "steps", 0, "snippet").Равно("язачем_тостартуютесты");
	
	Сценарии = Ожидается.Тест("Список сценариев").Что(ДанныеФайла).Получить("scenarios").Вернуть();
	Ожидается.Тест("Список сценариев").Что(Сценарии).Функц("Количество").Равно(2);
	
	Ожидается.Тест("Первый сценарий: заголовок").Что(Сценарии).Получить(0, "name").Равно("Один шаг");
	Ожидается.Тест("Первый сценарий: сниппет").Что(Сценарии).Получить(0, "snippet").Равно("одиншаг");
	Ожидается.Тест("Первый сценарий: тэги").Что(Сценарии).Получить(0, "tags", 0, "text").Равно("ТегСценария1");
	Ожидается.Тест("Первый сценарий: шаги").Что(Сценарии).Получить(0, "steps").Функц("Количество").Равно(2);
	Ожидается.Тест("Сниппет шага 1").Что(Сценарии).Получить(0, "steps", 0, "snippet").Равно("яначинаюдвижение");
	Ожидается.Тест("Сниппет шага 2").Что(Сценарии).Получить(0, "steps", 1, "snippet").Равно("яделаюшаг");
	
	Ожидается.Тест("Второй сценарий: заголовок").Что(Сценарии).Получить(1, "name").Равно("Наблюдатель");
	Ожидается.Тест("Второй сценарий: сниппет").Что(Сценарии).Получить(1, "snippet").Равно("наблюдатель");
	Ожидается.Тест("Второй сценарий: тэги").Что(Сценарии).Получить(1, "tags", 0, "text").Равно("ТегСценария2");
	Ожидается.Тест("Второй сценарий: шаги").Что(Сценарии).Получить(1, "steps").Функц("Количество").Равно(1);
	Ожидается.Тест("Следующий уровень").Что(Сценарии).Получить(1, "steps", 0, "steps").Функц("Количество").Равно(2);

КонецПроцедуры

&НаКлиенте
Процедура Тест_РаботаСТаблицами(Ожидается) Экспорт
	
	ВК = Ожидается.Тест().Компонента("GherkinParser").Установить("КлючевыеСлова", ПолучитьКлючевыеСлова(Ожидается)).Вернуть();
	
	Ожидается.Тест().Что(ВК).Установить("ЭкранируемыеСимволы", "nrt|""'");
	
	ТекстСценария =
	"Функциональность: Таблицы
	|@ТегКонтекста
	|Контекст: 
	|	Когда в таблице ""Список"" я перехожу к строке:
	|		| Дата       | Наименование         | Кол-во | Цена  | Сумма | 
	|		| 23.01.2021 | 'Управляемая форма'  | 10     | 20.43 | 204.3 |
	|		| 25/01/2021 | 'Регистр накопления' | 5      | 18.20 |    91 |
	|		| 10.01.21   | 'Параметры\nсеанса'  | 2      | 15.37 | 30.74 |
	|
	|		||
	|
	|		| ПервоеСлагаемое | ВтороеСлагаемое  | Сумма |
	|		|       2.5       |      4.5         |   7   |
	|		|       2         |      3           |   5   |
	|		|       10        |      20          |  30   |
	|	
	|	Тогда в подвале документа появляются итоги:
	|		| Описание           | Пример значения   |  №  |
	|		| Одинарные кавычки  | 'Разде\|литель'   |  0  |
	|		| Двойные кавычки    | ""Разде|литель""  |  1  |
	|		| Угловые скобки     | <Угловые|скобки>  |  2  |
	|		| Двойная кавычка    | ""                |  3  |
	|		| Одинарная кавычка  | '                 |  4  |
	|		| Символ             | $                 |  5  |
	|		| Одна цифра         | 9                 |  6  |
	|		| Целое число        | 5416              |  7  |
	|		| Рациональное       | 8642,512          |  8  |
	|		| Отрицательное      | -786.54           |  9  |
	|		| Дата               | 12.02.2021        | 10  |
	|		| Дата               | 19/01/2018        | 11  |
	|		| Число в кавычках   | ""42365""         | 12  |
	|		| Спецсимволы        | \t\r\n            | 13  |
	|		| Табулятор          | \t                | 14  |
	|		| Табулятор          | \r                | 15  |
	|		| Перенос строки     | \n                | 16  |
	|		| Разделитель        | \|                | 17  |
	|		| Экранирование      | Текст\|Строки     | 18  |
	|		| Р в ячейке         | Р                 | 19  |
	|
	|	И я проверяю пустые ячейки
	|		| Имя | Тип |
	|		|     | ' ' |
	|		| ''  |     |
	|		|||
	|";
	
	
	ДанныеФайла = Ожидается.Тест("Парсинг строки").Что(ВК).Функц("Прочитать", ТекстСценария).JSON().Вернуть();
	СписокШагов = Ожидается.Тест("Список шагов").Что(ДанныеФайла).Получить("background", "steps").ИмеетТип("Массив").Вернуть();
	
	Ожидается.Тест("Количество таблиц шага").Что(СписокШагов).Получить(0, "tables").Функц("Количество").Равно(3);
	Ожидается.Тест("Количество колонок в таблице").Что(СписокШагов).Получить(0, "tables", 0, "head", "tokens").Функц("Количество").Равно(5);
	Ожидается.Тест("Шапка пустой таблицы").Что(СписокШагов).Получить(0, "tables", 1, "head").Ошибка().Получить("tokens");
	Ожидается.Тест("Тело пустой таблицы").Что(СписокШагов).Получить(0, "tables", 1, "body").Ошибка().Получить("tokens");
	
	ШапкаТаблицы = Ожидается.Тест("Шапка таблицы").Что(СписокШагов).Получить(1, "tables", 0, "head").Вернуть();
	Ожидается.Тест("Заголовок колонки").Что(ШапкаТаблицы).Получить("tokens", 0, "text").Равно("Описание");
	Ожидается.Тест("Колонка с пробелом").Что(ШапкаТаблицы).Получить("tokens", 1, "text").Равно("Пример значения");
	
	СтрокиТаблицы = Ожидается.Тест("Тело таблицы").Что(СписокШагов).Получить(1, "tables", 0, "body").Вернуть();
	Ожидается.Тест("Текст с пробелом").Что(СтрокиТаблицы).Получить(0, "tokens", 0, "text").Равно("Одинарные кавычки");
	Ожидается.Тест("Одинарные кавычки").Что(СтрокиТаблицы).Получить(0, "tokens", 1, "text").Равно("Разде|литель");
	Ожидается.Тест("Двойные кавычки").Что(СтрокиТаблицы).Получить(1, "tokens", 1, "text").Равно("Разде|литель");
	Ожидается.Тест("Угловые скобки").Что(СтрокиТаблицы).Получить(2, "tokens", 1, "text").Равно("Угловые|скобки");
	Ожидается.Тест("Двойная кавычка").Что(СтрокиТаблицы).Получить(3, "tokens", 1, "text").Равно("""");
	Ожидается.Тест("Одинарная кавычка").Что(СтрокиТаблицы).Получить(4, "tokens", 1, "text").Равно("'");
	Ожидается.Тест("Одиночный символ").Что(СтрокиТаблицы).Получить(5, "tokens", 1, "text").Равно("$");
	Ожидается.Тест("Одна цифра").Что(СтрокиТаблицы).Получить(6, "tokens", 1, "type").Равно("Number");
	Ожидается.Тест("Одна цифра").Что(СтрокиТаблицы).Получить(6, "tokens", 1, "text").Равно(9);
	Ожидается.Тест("Целое число").Что(СтрокиТаблицы).Получить(7, "tokens", 1, "text").Равно(5416);
	Ожидается.Тест("Рациональное").Что(СтрокиТаблицы).Получить(8, "tokens", 1, "text").Равно(8642.512);
	Ожидается.Тест("Отрицательное").Что(СтрокиТаблицы).Получить(9, "tokens", 1, "text").Равно(-786.54);
	Ожидается.Тест("Дата через точки").Что(СтрокиТаблицы).Получить(10, "tokens", 1, "text").Равно("12.02.2021");
	Ожидается.Тест("Дата через точки").Что(СтрокиТаблицы).Получить(10, "tokens", 1, "type").Равно("Date");
	Ожидается.Тест("Дата через слэш").Что(СтрокиТаблицы).Получить(11, "tokens", 1, "text").Равно("19/01/2018");
	Ожидается.Тест("Дата через точки").Что(СтрокиТаблицы).Получить(11, "tokens", 1, "type").Равно("Date");
	Ожидается.Тест("Число в кавычках").Что(СтрокиТаблицы).Получить(12, "tokens", 1, "text").Равно("42365");
	Ожидается.Тест("Дата через точки").Что(СтрокиТаблицы).Получить(12, "tokens", 1, "type").Равно("Param");
	Ожидается.Тест("Спецсимволы").Что(СтрокиТаблицы).Получить(13, "tokens", 1, "text").Равно(Символы.Таб + Символы.ВК + Символы.ПС);
	Ожидается.Тест("Один табулятор").Что(СтрокиТаблицы).Получить(14, "tokens", 1, "text").Равно(Символы.Таб);
	Ожидается.Тест("Один возврат каретки").Что(СтрокиТаблицы).Получить(15, "tokens", 1, "text").Равно(Символы.ВК);
	Ожидается.Тест("Один перенос строки").Что(СтрокиТаблицы).Получить(16, "tokens", 1, "text").Равно(Символы.ПС);
	Ожидается.Тест("Разделитель таблицы").Что(СтрокиТаблицы).Получить(17, "tokens", 1, "text").Равно("|");
	Ожидается.Тест("Буква ""Р"" в ячейке").Что(СтрокиТаблицы).Получить(17, "tokens", 0, "text").Равно("Разделитель");
	Ожидается.Тест("Р в ячейке").Что(СтрокиТаблицы).Получить(19, "tokens", 0, "text").Равно("Р в ячейке");
	Ожидается.Тест("Р одиночная").Что(СтрокиТаблицы).Получить(19, "tokens", 1, "text").Равно("Р");
	
	СтрокиТаблицы = Ожидается.Тест("Таблица с пустыами ячейками").Что(СписокШагов).Получить(2, "tables", 0, "body").Вернуть();
	Ожидается.Тест("Пустая ячейка таблицы").Что(СтрокиТаблицы).Получить(0, "tokens", 0, "type").Равно("None");
	Ожидается.Тест("Текст пустой ячейки").Что(СтрокиТаблицы).Получить(0, "tokens", 0, "text").Равно("");
	Ожидается.Тест("Ячейка с пробелом").Что(СтрокиТаблицы).Получить(0, "tokens", 1, "text").Равно(" ");
	Ожидается.Тест("Ячейка с пустым текстом").Что(СтрокиТаблицы).Получить(1, "tokens", 0, "text").Равно("");
	Ожидается.Тест("Пустая ячейка таблицы").Что(СтрокиТаблицы).Получить(1, "tokens", 1, "type").Равно("None");
	Ожидается.Тест("Ячейка таблицы без содержимого").Что(СтрокиТаблицы).Получить(2, "tokens", 0, "type").Равно("None");
	Ожидается.Тест("Ячейка таблицы без содержимого").Что(СтрокиТаблицы).Получить(2, "tokens", 1, "type").Равно("None");
	
КонецПроцедуры

&НаКлиенте
Процедура Тест_СтруктураСценария(Ожидается) Экспорт
	
	ВК = Ожидается.Тест().Компонента("GherkinParser").Установить("КлючевыеСлова", ПолучитьКлючевыеСлова(Ожидается)).Вернуть();
	
	ТекстСценария =
	"@ExportScenarios
	|Функционал: Структура сценария
	|
	|Контекст: 
	|	Допустим я стартую тесты
	|
	|@ПредметДействие
	|Структура сценария: Есть <Объект> я могу <Действовать>
	|	Когда у меня есть <Предмет>
	|	Тогда я могу <Действие>
	|
	|Примеры:
	|	| Предмет     | Действие     |
	|	| Книга       | Читать       |
	|	| ""Ручка""   | ""Писать""   |
	|	| ""Кисть""   | ""Рисовать"" |
	|	| ""Телефон"" | ""Звонить""  |
	|	| <Объект>    | <Действовать>|
	|
	|@СложениеЧисел
	|Структура сценария: Сложение чисел
	|	Когда Я передал первый параметр сложения <ПервоеСлагаемое>
	|	И Я передал второй параметр сложения <ВтороеСлагаемое>
	|	Тогда Я получу Сумму <Сумма>
    |
	|	Примеры:
	|		| ПервоеСлагаемое | ВтороеСлагаемое | Сумма |
	|		|       2.5       |      4.5        |   7   |
	|		|       2         |      3          |   5   |
	|		|       10        |      20         |  30   |
	|";
	
	НаборСтруктур = Ожидается.Тест("Парсинг строки").Что(ВК).Функц("Прочитать", ТекстСценария).Получить("scenarios").Вернуть();
	
	Ожидается.Тест("Количество шагов").Что(НаборСтруктур).Получить(0, "steps").Функц("Количество").Равно(2);
	ТаблицаПримеров = Ожидается.Тест("Генерация сценария по примерам").Что(НаборСтруктур).Получить(0, "examples").Вернуть();
	Ожидается.Тест("Ключевое слово таблицы примеров").Что(ТаблицаПримеров).Получить("keyword", "text").Равно("Примеры");
	Ожидается.Тест("Количество строк примера").Что(ТаблицаПримеров).Получить("body").Функц("Количество").Равно(5);
	Ожидается.Тест("Содержание строк примера").Что(ТаблицаПримеров).Получить("body", 0, "tokens", 0, "text").Равно("Книга");
	Ожидается.Тест("Первый пример, первый шаг").Что(ТаблицаПримеров).Получить("body", 0, "script", "steps", 0, "text").Сокр().Равно("Когда у меня есть <Книга>");
	Ожидается.Тест("Первый пример, второй шаг").Что(ТаблицаПримеров).Получить("body", 0, "script", "steps", 1, "text").Сокр().Равно("Тогда я могу <Читать>");
	Ожидается.Тест("Второй пример, первый шаг").Что(ТаблицаПримеров).Получить("body", 1, "script", "steps", 0, "text").Сокр().Равно("Когда у меня есть ""Ручка""");
	Ожидается.Тест("Второй пример, второй шаг").Что(ТаблицаПримеров).Получить("body", 1, "script", "steps", 1, "text").Сокр().Равно("Тогда я могу ""Писать""");
	
	Ожидается.Тест("Количество шагов").Что(НаборСтруктур).Получить(1, "steps").Функц("Количество").Равно(3);
	ТаблицаПримеров = Ожидается.Тест("Первая структура").Что(НаборСтруктур).Получить(1, "examples").Вернуть();
	Ожидается.Тест("Количество строк примера").Что(ТаблицаПримеров).Получить("body").Функц("Количество").Равно(3);
	Ожидается.Тест("Содержание строк").Что(ТаблицаПримеров).Получить("body", 0, "tokens", 0, "text").Равно(2.5);
	
	ВременнаяПапка = ПолучитьИмяВременногоФайла();
	УдалитьФайлы(ВременнаяПапка);
	СоздатьКаталог(ВременнаяПапка);
	ВременнаяПапка = ВременнаяПапка + ПолучитьРазделительПути();
	
	ФайлПодсценариев = ВременнаяПапка + "Структура сценария.feature";
	ЗаписьТекста = Новый ЗаписьТекста(ФайлПодсценариев, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(ТекстСценария);
	ЗаписьТекста.Закрыть();
	
	ТекстСценария =
	"@ГлавныйСценарий
	|Функционал: Вызов структуры
	|Сценарий: Главный 
	|	Когда я совершаю действия
	|	| Предмет     | Действие     |
	|	| ""Окно""    | ""Открыть""  |
	|	| ""Дверь""   | ""Закрыть""  |
	|
	|	| ПервоеСлагаемое | ВтороеСлагаемое | Сумма |
	|	|       14        |      7          |  21   |
	|	|       13        |      12         |  25   |
	|
	|Сценарий: Я совершаю действия
	|	Когда есть 'какой-то предмет' я могу 'что-то сделать'
	|	| Предмет     | Действие     |
	|	| ""Мяч""     | ""Кидать""   |
	|
	|	Тогда сложение чисел
	|	| ПервоеСлагаемое | ВтороеСлагаемое | Сумма |
	|	|       18        |      15         |  33   |
	|
	|Сценарий: Структура без примеров
	|	Когда есть 'Ключ' я могу 'Открыть дверь'
	|";
	
	ОсновнойФайл = ВременнаяПапка + "Вызов подсценариев.feature";
	ЗаписьТекста = Новый ЗаписьТекста(ОсновнойФайл, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(ТекстСценария);
	ЗаписьТекста.Закрыть();
	
	СценарииФайла = Ожидается.Тест("Сканирование файла с библиотеками").Что(ВК).Функц("ПрочитатьФайл", ОсновнойФайл, ВременнаяПапка).Получить("scenarios").Вернуть();
	ШагиСценария = Ожидается.Тест("Шаги подсценария").Что(СценарииФайла).Получить(0, "steps", 0, "snippet", "steps").Вернуть();
	
	ТаблицаПримеров = Ожидается.Тест("Передача первой таблицы в примеры").Что(ШагиСценария).Получить(0, "snippet", "examples", "body").Вернуть();
	Ожидается.Тест("Данные первой таблицы в примерах").Что(ТаблицаПримеров).Получить(0, "tokens", 0, "text").Равно("Окно");
	Ожидается.Тест("Данные первой таблицы в примерах").Что(ТаблицаПримеров).Получить(1, "tokens", 0, "text").Равно("Дверь");
	Ожидается.Тест("Первый шаг первой строки").Что(ТаблицаПримеров).Получить(0, "script", "steps", 0, "text").Сокр().Равно("Когда у меня есть ""Окно""");
	Ожидается.Тест("Второй шаг первой строки").Что(ТаблицаПримеров).Получить(0, "script", "steps", 1, "text").Сокр().Равно("Тогда я могу ""Открыть""");
	Ожидается.Тест("Первый шаг второй строки").Что(ТаблицаПримеров).Получить(1, "script", "steps", 0, "text").Сокр().Равно("Когда у меня есть ""Дверь""");
	Ожидается.Тест("Второй шаг второй строки").Что(ТаблицаПримеров).Получить(1, "script", "steps", 1, "text").Сокр().Равно("Тогда я могу ""Закрыть""");
	
	ТаблицаПримеров = Ожидается.Тест("Передача первой таблицы в примеры").Что(ШагиСценария).Получить(1, "snippet", "examples", "body").Вернуть();
	Ожидается.Тест("Данные второй таблицы в примерах").Что(ТаблицаПримеров).Получить(0, "tokens", 0, "text").Равно(14);
	Ожидается.Тест("Данные второй таблицы в примерах").Что(ТаблицаПримеров).Получить(1, "tokens", 0, "text").Равно(13);
	Ожидается.Тест("Первый шаг первой строки").Что(ТаблицаПримеров).Получить(0, "script", "steps", 0, "text").Сокр().Равно("Когда Я передал первый параметр сложения 14");
	Ожидается.Тест("Второй шаг первой строки").Что(ТаблицаПримеров).Получить(0, "script", "steps", 1, "text").Сокр().Равно("И Я передал второй параметр сложения 7");
	Ожидается.Тест("Третий шаг второй строки").Что(ТаблицаПримеров).Получить(0, "script", "steps", 2, "text").Сокр().Равно("Тогда Я получу Сумму 21");
	Ожидается.Тест("Первый шаг второй строки").Что(ТаблицаПримеров).Получить(1, "script", "steps", 0, "text").Сокр().Равно("Когда Я передал первый параметр сложения 13");
	Ожидается.Тест("Второй шаг второй строки").Что(ТаблицаПримеров).Получить(1, "script", "steps", 1, "text").Сокр().Равно("И Я передал второй параметр сложения 12");
	Ожидается.Тест("Третий шаг первой строки").Что(ТаблицаПримеров).Получить(1, "script", "steps", 2, "text").Сокр().Равно("Тогда Я получу Сумму 25");
	
	ШагиСценария = Ожидается.Тест("Шаги вызова структуры").Что(СценарииФайла).Получить(2, "steps", 0, "snippet", "steps").Вернуть();
	ТаблицаПримеров = Ожидается.Тест("Примеры вызова структуры").Что(СценарииФайла).Получить(2, "steps", 0, "snippet", "examples", "body").Вернуть();
	Ожидается.Тест("Первый шаг строки сценария").Что(ТаблицаПримеров).Получить(4, "script", "steps", 0, "text").Сокр().Равно("Когда у меня есть 'Ключ'");
	Ожидается.Тест("Первый шаг строки сценария").Что(ТаблицаПримеров).Получить(4, "script", "steps", 1, "text").Сокр().Равно("Тогда я могу 'Открыть дверь'");
	
	УдалитьФайлы(ОсновнойФайл);
	УдалитьФайлы(ФайлПодсценариев);
	УдалитьФайлы(ВременнаяПапка);
	
КонецПроцедуры

&НаКлиенте
Процедура Тест_СканированиеПапки(Ожидается) Экспорт
	
	ВК = Ожидается.Тест().Компонента("GherkinParser").Установить("КлючевыеСлова", ПолучитьКлючевыеСлова(Ожидается)).Вернуть();
	
	ВременнаяПапка = ПолучитьИмяВременногоФайла();
	УдалитьФайлы(ВременнаяПапка);
	СоздатьКаталог(ВременнаяПапка);
	
	ВременнаяПапка = ВременнаяПапка + ПолучитьРазделительПути();
	ВложеннаяПапка = ВременнаяПапка + "вложенная папка" + ПолучитьРазделительПути();
	СоздатьКаталог(ВложеннаяПапка);
	
	ТекстСценария =
	"# language: ru
	|@Русский
	|Функционал: Русский язык
	|";
	
	ФайлНаРусском = ВременнаяПапка + "Русский язык.feature";
	ЗаписьТекста = Новый ЗаписьТекста(ФайлНаРусском, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(ТекстСценария);
	ЗаписьТекста.Закрыть();
	
	ТекстСценария =
	"# language: en
	|@English
	|@Английский
	|Feature: English
	|";
	
	ФайлНаАнглийском = ВложеннаяПапка + "Английский язык.feature";
	ЗаписьТекста = Новый ЗаписьТекста(ФайлНаАнглийском, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(ТекстСценария);
	ЗаписьТекста.Закрыть();
	
	МассивПапок = Новый Массив;
	МассивПапок.Добавить(ВременнаяПапка);
	МассивПапок.Добавить(ВложеннаяПапка);
	Директории = ЗаписатьСтрокуJSON(МассивПапок);
	
	ДанныеПапки = Ожидается.Тест("Сканирование одной папки").Что(ВК).Функц("ПрочитатьПапку", ВременнаяПапка).JSON().Вернуть();
	Ожидается.Тест("Количество файлов").Что(ДанныеПапки).Функц("Количество").Равно(2);
	Ожидается.Тест("Файл на русском").Что(ДанныеПапки).Получить(0, "filename").Равно(ФайлНаРусском);
	Ожидается.Тест("Файл на английском").Что(ДанныеПапки).Получить(1, "filename").Равно(ФайлНаАнглийском);
	Ожидается.Тест("Русский язык").Что(ДанныеПапки).Получить(0, "feature", "name").Равно("Русский язык");
	Ожидается.Тест("Английский язык").Что(ДанныеПапки).Получить(1, "feature", "name").Равно("English");
	
	ДанныеПапки = Ожидается.Тест("Сканирование массива папок").Что(ВК).Функц("ПрочитатьПапку", Директории).JSON().Вернуть();
	Ожидается.Тест("Количество файлов").Что(ДанныеПапки).Функц("Количество").Равно(2);
	Ожидается.Тест("Файл на русском").Что(ДанныеПапки).Получить(0, "filename").Равно(ФайлНаРусском);
	Ожидается.Тест("Файл на английском").Что(ДанныеПапки).Получить(1, "filename").Равно(ФайлНаАнглийском);
	Ожидается.Тест("Русский язык").Что(ДанныеПапки).Получить(0, "feature", "name").Равно("Русский язык");
	Ожидается.Тест("Английский язык").Что(ДанныеПапки).Получить(1, "feature", "name").Равно("English");
	
	
	ТекстСценария =
	"# language: en
	|@English
	|Feature: English
	|";
	
	ФайлEnglish = ВременнаяПапка + "English.feature";
	ЗаписьТекста = Новый ЗаписьТекста(ФайлEnglish, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(ТекстСценария);
	ЗаписьТекста.Закрыть();
	
	ФильтрТегов = "{""include"":[""Русский""]}";
	ДанныеПапки = Ожидается.Тест(ФильтрТегов).Что(ВК).Функц("ПрочитатьПапку", Директории, , ФильтрТегов).JSON().Вернуть();
	Ожидается.Тест("Количество файлов").Что(ДанныеПапки).Функц("Количество").Равно(1);
	Ожидается.Тест("Найденный файл").Что(ДанныеПапки).Получить(0, "filename").Равно(ФайлНаРусском);
	
	ФильтрТегов = "{""include"":[""English""]}";
	ДанныеПапки = Ожидается.Тест(ФильтрТегов).Что(ВК).Функц("ПрочитатьПапку", Директории, , ФильтрТегов).JSON().Вернуть();
	Ожидается.Тест("Количество файлов").Что(ДанныеПапки).Функц("Количество").Равно(2);
	Ожидается.Тест("Найденный файл").Что(ДанныеПапки).Получить(1, "filename").Равно(ФайлНаАнглийском);
	Ожидается.Тест("Найденный файл").Что(ДанныеПапки).Получить(0, "filename").Равно(ФайлEnglish);
	
	ФильтрТегов = "{""include"":[""English""],""exclude"":[""Английский""]}";
	ДанныеПапки = Ожидается.Тест(ФильтрТегов).Что(ВК).Функц("ПрочитатьПапку", Директории, , ФильтрТегов).JSON().Вернуть();
	Ожидается.Тест("Количество файлов").Что(ДанныеПапки).Функц("Количество").Равно(1);
	Ожидается.Тест("Найденный файл").Что(ДанныеПапки).Получить(0, "filename").Равно(ФайлEnglish);
	
	ФильтрТегов = "{""exclude"":[""English"",""Английский""]}";
	ДанныеПапки = Ожидается.Тест(ФильтрТегов).Что(ВК).Функц("ПрочитатьПапку", Директории, , ФильтрТегов).JSON().Вернуть();
	Ожидается.Тест("Количество файлов").Что(ДанныеПапки).Функц("Количество").Равно(1);
	Ожидается.Тест("Найденный файл").Что(ДанныеПапки).Получить(0, "filename").Равно(ФайлНаРусском);
	
	УдалитьФайлы(ФайлEnglish);
	УдалитьФайлы(ФайлНаРусском);
	УдалитьФайлы(ФайлНаАнглийском);
	УдалитьФайлы(ВложеннаяПапка);
	УдалитьФайлы(ВременнаяПапка);
	
КонецПроцедуры

&НаКлиенте
Процедура Тест_ФильтрацияСценариевПоТегам(Ожидается) Экспорт
	
	ВК = Ожидается.Тест().Компонента("GherkinParser").Установить("КлючевыеСлова", ПолучитьКлючевыеСлова(Ожидается)).Вернуть();
	
	ВременнаяПапка = ПолучитьИмяВременногоФайла();
	УдалитьФайлы(ВременнаяПапка);
	СоздатьКаталог(ВременнаяПапка);
	
	ВременнаяПапка = ВременнаяПапка + ПолучитьРазделительПути();
	ВложеннаяПапка = ВременнаяПапка + "вложенная папка" + ПолучитьРазделительПути();
	СоздатьКаталог(ВложеннаяПапка);
	
	ТекстСценария =
	"# language: ru
	|@Русский
	|Функционал: Русский язык
	|@Видео
	|Сценарий: Видео
	|@Книга
	|Сценарий: Книга
	|@Фото
	|Сценарий: Фото
	|";
	
	ФайлНаРусском = ВременнаяПапка + "Русский язык.feature";
	ЗаписьТекста = Новый ЗаписьТекста(ФайлНаРусском, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(ТекстСценария);
	ЗаписьТекста.Закрыть();
	
	ТекстСценария =
	"# language: en
	|@English
	|@Английский
	|Feature: English
	|@Video
	|@Видео
	|Scenario: Video
	|@Book
	|@Книга
	|Scenario: Book
	|@Photo
	|Scenario: Photo
	|";
	
	ФайлНаАнглийском = ВложеннаяПапка + "Английский язык.feature";
	ЗаписьТекста = Новый ЗаписьТекста(ФайлНаАнглийском, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(ТекстСценария);
	ЗаписьТекста.Закрыть();
	
	ТекстСценария =
	"# language: en
	|@English
	|Feature: English
	|@Video
	|Scenario: Video
	|@Book
	|Scenario: Book
	|@Photo
	|Scenario: Photo
	|";
	
	ФайлEnglish = ВременнаяПапка + "English.feature";
	ЗаписьТекста = Новый ЗаписьТекста(ФайлEnglish, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(ТекстСценария);
	ЗаписьТекста.Закрыть();
	
	ФильтрТегов = "{""include"":[""English"",""Фото""],""exclude"":[""Видео""]}";
	ДанныеПапки = Ожидается.Тест(ФильтрТегов).Что(ВК).Функц("ПрочитатьПапку", ВременнаяПапка, , ФильтрТегов).JSON().Вернуть();
	Ожидается.Тест("Количество файлов").Что(ДанныеПапки).Функц("Количество").Равно(3);
	Ожидается.Тест("Количество сценариев").Что(ДанныеПапки).Получить(0, "scenarios").Функц("Количество").Равно(3);
	Ожидается.Тест("Количество сценариев").Что(ДанныеПапки).Получить(1, "scenarios").Функц("Количество").Равно(1);
	Ожидается.Тест("Количество сценариев").Что(ДанныеПапки).Получить(2, "scenarios").Функц("Количество").Равно(2);
	
	ФильтрТегов = "{""include"":[""Видео""],""exclude"":[""Video""]}";
	ДанныеПапки = Ожидается.Тест(ФильтрТегов).Что(ВК).Функц("ПрочитатьПапку", ВременнаяПапка, , ФильтрТегов).JSON().Вернуть();
	Ожидается.Тест("Количество файлов").Что(ДанныеПапки).Функц("Количество").Равно(1);
	Ожидается.Тест("Найденный файл").Что(ДанныеПапки).Получить(0, "filename").Равно(ФайлНаРусском);
	Ожидается.Тест("Количество сценариев").Что(ДанныеПапки).Получить(0, "scenarios").Функц("Количество").Равно(1);
	Ожидается.Тест("Сниппет сценария").Что(ДанныеПапки).Получить(0, "scenarios", 0, "snippet").Равно("видео");
	
	УдалитьФайлы(ФайлEnglish);
	УдалитьФайлы(ФайлНаРусском);
	УдалитьФайлы(ФайлНаАнглийском);
	УдалитьФайлы(ВложеннаяПапка);
	УдалитьФайлы(ВременнаяПапка);
	
КонецПроцедуры

&НаКлиенте
Процедура Тест_ЭкспортныеСценарии(Ожидается) Экспорт
	
	ВК = Ожидается.Тест().Компонента("GherkinParser").Установить("КлючевыеСлова", ПолучитьКлючевыеСлова(Ожидается)).Вернуть();
	
	ВременнаяПапка = ПолучитьИмяВременногоФайла();
	УдалитьФайлы(ВременнаяПапка);
	СоздатьКаталог(ВременнаяПапка);
	ВременнаяПапка = ВременнаяПапка + ПолучитьРазделительПути();
	
	ТекстФайла =
	"# language: ru
	|@ExportScenarios
	|Функционал: Подсценарии
	|Сценарий: Я читаю книгу
	|	Допустим я беру книгу
	|	Тогда я открываю страницу
	|	И я читаю всю ночь напролет
	|Сценарий: ""Вечером"" я слушаю радио ""FM""
	|	Допустим я ""ВЕЧЕром"" включаю радио
	|	Если я нахожу волну ""FM""
	|	Тогда я делаю звук громче
	|	И так я ""[ВЕЧЕРОМ] слушаю [Fm]""
	|	И ""действие [вечеРОМ] происходит""
	|	И параметр  ""[] пусто [нет]""
	|";
	
	ФайлПодсценариев = ВременнаяПапка + "Экспортируемые подсценарии.feature";
	ЗаписьТекста = Новый ЗаписьТекста(ФайлПодсценариев, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(ТекстФайла);
	ЗаписьТекста.Закрыть();
	
	
	ТекстФайла =
	"# language: ru
	|@ExportScenarios
	|Функционал: Рекурсия
	|Сценарий: Я провожу свой досуг в 19 часов 40 минут
	|	Пусть ""Днем"" я слушаю радио ""Юность""
	|	К тому же я читаю книгу ""Два капитана""
	|	И на часах при этом 19 часов 40 минут
	|";
	
	ФайлРекурсии = ВременнаяПапка + "Рекурсивные подсценарии.feature";
	ЗаписьТекста = Новый ЗаписьТекста(ФайлРекурсии, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(ТекстФайла);
	ЗаписьТекста.Закрыть();
	
	ТекстФайла =
	"# language: ru
	|@ГлавныйСценарий
	|Функционал: Досуг
	|Сценарий: 
	|	Пусть я читаю книгу
	|	Также ""Утром"" я слушаю радио ""Маяк""
	|	Иначе я провожу свой досуг в 18 часов 10 минут
	|";
	
	ОсновнойФайл = ВременнаяПапка + "Вызов подсценариев.feature";
	ЗаписьТекста = Новый ЗаписьТекста(ОсновнойФайл, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(ТекстФайла);
	ЗаписьТекста.Закрыть();
	
	МассивПапок = Новый Массив;
	МассивПапок.Добавить(ВременнаяПапка);
	Бибилиотеки = ЗаписатьСтрокуJSON(МассивПапок);
	
	ДанныеФайла = Ожидается.Тест("Сканирование файла с библиотеками").Что(ВК).Функц("ПрочитатьФайл", ОсновнойФайл, Бибилиотеки).JSON().Вернуть();
	Ожидается.Тест("Один сценарий из файла").Что(ДанныеФайла).Получить("filename").Равно(ОсновнойФайл);
	ШагиСценария = Ожидается.Тест("Шаги сценария").Что(ДанныеФайла).Получить("scenarios", 0, "steps").Вернуть();
	Ожидается.Тест("Шаги сценария").Что(ШагиСценария).Функц("Количество").Равно(3);
	Ожидается.Тест("Сниппет подсценария файла").Что(ШагиСценария).Получить(0, "snippet", "key").Равно("ячитаюкнигу");
	ШагиПодсценария = Ожидается.Тест("Подсценарий").Что(ШагиСценария).Получить(0, "snippet", "steps").Вернуть();
	Ожидается.Тест("Шаги подсценария").Что(ШагиПодсценария).Функц("Количество").Равно(3);
	Ожидается.Тест("Шаги подсценария").Что(ШагиПодсценария).Получить(0, "snippet").Равно("яберукнигу");
	Ожидается.Тест("Шаги подсценария").Что(ШагиПодсценария).Получить(1, "snippet").Равно("яоткрываюстраницу");
	Ожидается.Тест("Шаги подсценария").Что(ШагиПодсценария).Получить(2, "snippet").Равно("ячитаювсюночьнапролет");
	КэшируемыеСценарии = Ожидается.Тест("Кэшируемые сценарии").Что(ВК).Функц("ПолучитьКэш").Получить("snippets").Функц("Количество").Равно(3);
	Ожидается.Тест("Очищаем кэш одного файла").Что(ВК).Проц("ОчиститьКэш", ФайлПодсценариев).Функц("ПолучитьКэш").Получить("snippets").Функц("Количество").Равно(1);
	
	ДанныеФайла = Ожидается.Тест("Сканирование файла с кэшем").Что(ВК).Функц("ПрочитатьФайл", ОсновнойФайл).JSON().Вернуть();
	Ожидается.Тест("Один сценарий из файла").Что(ДанныеФайла).Получить("filename").Равно(ОсновнойФайл);
	ШагиСценария = Ожидается.Тест("Шаги сценария").Что(ДанныеФайла).Получить("scenarios", 0, "steps").Вернуть();
	Ожидается.Тест("Сниппет не найден без кэша").Что(ШагиСценария).Получить(0, "snippet").Равно("ячитаюкнигу");
	Ожидается.Тест("Сниппет не найден без кэша").Что(ШагиСценария).Получить(1, "snippet").Равно("яслушаюрадио");
	Ожидается.Тест("Сниппет найден из кэша").Что(ШагиСценария).Получить(2, "snippet", "key").Равно("япровожусвойдосугвчасовминут");
	Ожидается.Тест("Полностью очищаем кэш").Что(ВК).Проц("ОчиститьКэш").Функц("ПолучитьКэш").Ошибка().Получить("snippets");
	
	ДанныеФайла = Ожидается.Тест("Сканирование файла без кэша").Что(ВК).Функц("ПрочитатьФайл", ОсновнойФайл).JSON().Вернуть();
	Ожидается.Тест("Один сценарий из файла").Что(ДанныеФайла).Получить("filename").Равно(ОсновнойФайл);
	ШагиСценария = Ожидается.Тест("Шаги сценария").Что(ДанныеФайла).Получить("scenarios", 0, "steps").Вернуть();
	Ожидается.Тест("Без кэша нет сниппета").Что(ШагиСценария).Получить(0, "snippet").Равно("ячитаюкнигу");
	Ожидается.Тест("Без кэша нет сниппета").Что(ШагиСценария).Получить(1, "snippet").Равно("яслушаюрадио");
	Ожидается.Тест("Без кэша нет сниппета").Что(ШагиСценария).Получить(2, "snippet").Равно("япровожусвойдосугвчасовминут");

	ФильтрТегов = "{""include"":[""ГлавныйСценарий""]}";
	ДанныеПапки = Ожидается.Тест("Сканирование папки").Что(ВК).Функц("ПрочитатьПапку", ВременнаяПапка, ВременнаяПапка, ФильтрТегов).JSON().Вернуть();
	Ожидается.Тест("Один сценарий по фильтру").Что(ДанныеПапки).Получить(0, "scenarios").Функц("Количество").Равно(1);
	ШагиСценария = Ожидается.Тест("Первый шаг сценария").Что(ДанныеПапки).Получить(0, "scenarios", 0, "steps").Вернуть();
	Ожидается.Тест("Шаги сценария").Что(ШагиСценария).Функц("Количество").Равно(3);
	
	Ожидается.Тест("Сниппет подсценария папки").Что(ШагиСценария).Получить(0, "snippet", "key").Равно("ячитаюкнигу");
	ШагиПодсценария = Ожидается.Тест("Подсценарий").Что(ШагиСценария).Получить(0, "snippet", "steps").Вернуть();
	Ожидается.Тест("Шаги подсценария").Что(ШагиПодсценария).Функц("Количество").Равно(3);
	Ожидается.Тест("Шаги подсценария").Что(ШагиПодсценария).Получить(0, "snippet").Равно("яберукнигу");
	Ожидается.Тест("Шаги подсценария").Что(ШагиПодсценария).Получить(1, "snippet").Равно("яоткрываюстраницу");
	Ожидается.Тест("Шаги подсценария").Что(ШагиПодсценария).Получить(2, "snippet").Равно("ячитаювсюночьнапролет");
	
	СниппетПодсценария = Ожидается.Тест("Сниппет вложенного подсценария").Что(ШагиСценария).Получить(1, "snippet").Вернуть();
	Ожидается.Тест("Ключ сниппета подсценария").Что(СниппетПодсценария).Получить("key").Равно("яслушаюрадио");
	Ожидается.Тест("Второй параметр").Что(СниппетПодсценария).Получить("params", 0, "key").Равно("FM");
	Ожидается.Тест("Второй параметр").Что(СниппетПодсценария).Получить("params", 0, "value", "text").Равно("Маяк");
	Ожидается.Тест("Первый параметр").Что(СниппетПодсценария).Получить("params", 1, "key").Равно("Вечером");
	Ожидается.Тест("Первый параметр").Что(СниппетПодсценария).Получить("params", 1, "value", "text").Равно("Утром");
	ШагиСниппета = Ожидается.Тест("Шаги подсценария").Что(СниппетПодсценария).Получить("steps").Вернуть();
	Ожидается.Тест("Первый шаг с параметром").Что(ШагиСниппета).Получить(0, "text").Сокр().Равно("Допустим я ""Утром"" включаю радио");
	Ожидается.Тест("Второй шаг с параметром").Что(ШагиСниппета).Получить(1, "text").Сокр().Равно("Если я нахожу волну ""Маяк""");
	Ожидается.Тест("Третий шаг без параметров").Что(ШагиСниппета).Получить(2, "text").Сокр().Равно("Тогда я делаю звук громче");
	Ожидается.Тест("Подставновка параметров").Что(ШагиСниппета).Получить(3, "text").Сокр().Равно("И так я ""Утром слушаю Маяк""");
	Ожидается.Тест("Подставновка параметров").Что(ШагиСниппета).Получить(4, "text").Сокр().Равно("И ""действие Утром происходит""");
	Ожидается.Тест("Подстановка отсутствующего").Что(ШагиСниппета).Получить(5, "text").Сокр().Равно("И параметр  ""[] пусто [нет]""");
	
	КэшируемыеСценарии = Ожидается.Тест("Кэшируемые сценарии").Что(ВК).Функц("ПолучитьКэш").JSON().Вернуть();
	
	УдалитьФайлы(ОсновнойФайл);
	УдалитьФайлы(ФайлРекурсии);
	УдалитьФайлы(ФайлПодсценариев);
	УдалитьФайлы(ВременнаяПапка);
	
КонецПроцедуры

&НаКлиенте
Процедура Тест_ПередачаТаблицВСценарий(Ожидается) Экспорт
	
	ВК = Ожидается.Тест().Компонента("GherkinParser").Установить("КлючевыеСлова", ПолучитьКлючевыеСлова(Ожидается)).Вернуть();
	
	ВременнаяПапка = ПолучитьИмяВременногоФайла();
	УдалитьФайлы(ВременнаяПапка);
	СоздатьКаталог(ВременнаяПапка);
	ВременнаяПапка = ВременнаяПапка + ПолучитьРазделительПути();
	
	ТекстФайла =
	"# language: ru
	|@ExportScenarios
	|Функционал: Подсценарии
	|Сценарий: Я выполняю <Деление>
	|	Когда я делаю вычисления
	|	| Аргумент  | Значение |
	|	| Делимое   | 60       |
	|	| Делитель  | 20       |
	|	| Результат | 5        |
	|	Тогда я проверяю результат
	|	
	|	* Работа с группами 
	|		Когда я делаю вычисления
	|		| Аргумент  | Значение |
	|		| Множитель | 5        |
	|		| Множитель | 7        |
	|		| Результат | 35       |
	|		Тогда я проверяю результат
	|
	|		Когда я делаю вычисления
	|		| Аргумент  | Значение |
	|		| Делимое   | 42       |
	|		| Делитель  | 7        |
	|		| Результат | 6        |
	|		Тогда я проверяю результат
	|";
	
	ФайлПодсценариев = ВременнаяПапка + "Экспортируемые подсценарии.feature";
	ЗаписьТекста = Новый ЗаписьТекста(ФайлПодсценариев, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(ТекстФайла);
	ЗаписьТекста.Закрыть();
	
	ТекстФайла =
	"# language: ru
	|Функционал: Арифметика
	|Сценарий: Арифметические операции
	|	Пусть я выполняю <Вычитание>
	|	| Аргумент    | Значение |
	|	| Уменьшаемое | 27       |
	|	| вычитаемое  | 12       |
	|	| Результат   | 15       |
	|
	|	||
	|	
	|	| Аргумент    | Значение |
	|	| Уменьшаемое | 24       |
	|	| вычитаемое  | 14       |
	|	| Результат   | 10       |
	|";
	
	ОсновнойФайл = ВременнаяПапка + "Вызов подсценариев.feature";
	ЗаписьТекста = Новый ЗаписьТекста(ОсновнойФайл, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(ТекстФайла);
	ЗаписьТекста.Закрыть();
	
	ДанныеФайла = Ожидается.Тест("Чтение сценариев").Что(ВК).Функц("ПрочитатьФайл", ОсновнойФайл, ВременнаяПапка).JSON().Вернуть();
	Ожидается.Тест("Один сценарий из файла").Что(ДанныеФайла).Получить("filename").Равно(ОсновнойФайл);
	ШагиСценария = Ожидается.Тест("Шаги сценария").Что(ДанныеФайла).Получить("scenarios", 0, "steps").Вернуть();
	
	ШагиПодсценария = Ожидается.Тест("Сниппет подсценария").Что(ШагиСценария).Получить(0, "snippet", "steps").Вернуть();
	Ожидается.Тест("Первая таблица").Что(ШагиПодсценария).Получить(0, "tables", 0, "body", 2).Получить("tokens", 1, "text").Равно(15);
	ШагиГруппы = Ожидается.Тест("Шаги группы").Что(ШагиПодсценария).Получить(2, "steps").Вернуть();
	Ожидается.Тест("Вторая таблица").Что(ШагиГруппы).Получить(0, "tables", 0, "body", 2).Получить("tokens", 1, "text").Равно(35);
	Ожидается.Тест("Третья таблица").Что(ШагиГруппы).Получить(2, "tables", 0, "body", 2).Получить("tokens", 1, "text").Равно(10);
	
	УдалитьФайлы(ОсновнойФайл);
	УдалитьФайлы(ФайлПодсценариев);
	УдалитьФайлы(ВременнаяПапка);
	
КонецПроцедуры

&НаКлиенте
Процедура Тест_РекурсивнаяПередачаТаблиц(Ожидается) Экспорт
	
	ВК = Ожидается.Тест().Компонента("GherkinParser").Установить("КлючевыеСлова", ПолучитьКлючевыеСлова(Ожидается)).Вернуть();
	
	ВременнаяПапка = ПолучитьИмяВременногоФайла();
	УдалитьФайлы(ВременнаяПапка);
	СоздатьКаталог(ВременнаяПапка);
	ВременнаяПапка = ВременнаяПапка + ПолучитьРазделительПути();
	
	ТекстФайла =
	"# language: ru
	|@ExportScenarios
	|Функционал: Подсценарии
	|Сценарий: Я выполняю <Деление>
	|	Когда я делаю вычисления
	|	| Аргумент  | Значение |
	|	| Делимое   | 60       |
	|	| Делитель  | 20       |
	|	Тогда я проверяю результат
	|	| Аргумент  | Значение |
	|	| Результат | 5        |
	|Сценарий: я делаю вычисления
	|	Тогда шаг принимает таблицу
	|	| Аргумент  | Значение |
	|	| Множитель | 5        |
	|	| Множитель | 7        |
	|Сценарий: я проверяю результат
	|	Тогда шаг принимает таблицу
	|	| Аргумент  | Значение |
	|	| Результат | 35       |
	|";
	
	ФайлПодсценариев = ВременнаяПапка + "Экспортируемые подсценарии.feature";
	ЗаписьТекста = Новый ЗаписьТекста(ФайлПодсценариев, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(ТекстФайла);
	ЗаписьТекста.Закрыть();
	
	ТекстФайла =
	"# language: ru
	|Функционал: Арифметика
	|Сценарий: Арифметические операции
	|	Пусть я выполняю <Вычитание>
	|	| Аргумент    | Значение |
	|	| Уменьшаемое | 27       |
	|	| вычитаемое  | 12       |
	|
	|	| Аргумент    | Значение |
	|	| Слагаемое   | 7        |
	|	| Слагаемое   | 8        |
	|	| Результат   | 15       |
	|";
	
	ОсновнойФайл = ВременнаяПапка + "Вызов подсценариев.feature";
	ЗаписьТекста = Новый ЗаписьТекста(ОсновнойФайл, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(ТекстФайла);
	ЗаписьТекста.Закрыть();
	
	ДанныеФайла = Ожидается.Тест("Чтение сценариев").Что(ВК).Функц("ПрочитатьФайл", ОсновнойФайл, ВременнаяПапка).JSON().Вернуть();
	Ожидается.Тест("Один сценарий из файла").Что(ДанныеФайла).Получить("filename").Равно(ОсновнойФайл);
	ШагиСценария = Ожидается.Тест("Шаги сценария").Что(ДанныеФайла).Получить("scenarios", 0, "steps").Вернуть();
	
	Ожидается.Тест("Сниппет подсценария").Что(ШагиСценария).Получить(0, "snippet", "key").Равно("явыполняю");
	ШагиПодсценария = Ожидается.Тест("Шаги подсценария").Что(ШагиСценария).Получить(0, "snippet", "steps").Вернуть();
	
	Ожидается.Тест("Первая таблица").Что(ШагиСценария).Получить(0, "tables", 0, "body", 1).Получить("tokens", 1, "text").Равно(12);
	Ожидается.Тест("Таблица сценария").Что(ШагиПодсценария).Получить(0, "tables", 0, "body", 1).Получить("tokens", 1, "text").Равно(12);
	Ожидается.Тест("Таблица подсценария").Что(ШагиПодсценария).Получить(0, "snippet", "steps", 0, "tables", 0).Получить("body", 1, "tokens", 1, "text").Равно(12);
	
	Ожидается.Тест("Вторая таблица").Что(ШагиСценария).Получить(0, "tables", 1, "body", 2).Получить("tokens", 1, "text").Равно(15);
	Ожидается.Тест("Таблица сценария").Что(ШагиПодсценария).Получить(1, "tables", 0, "body", 2).Получить("tokens", 1, "text").Равно(15);
	Ожидается.Тест("Таблица подсценария").Что(ШагиПодсценария).Получить(1, "snippet", "steps", 0, "tables", 0).Получить("body", 2, "tokens", 1, "text").Равно(15);
	
	УдалитьФайлы(ОсновнойФайл);
	УдалитьФайлы(ФайлПодсценариев);
	УдалитьФайлы(ВременнаяПапка);
	
КонецПроцедуры

&НаКлиенте
Процедура Тест_ПередачаМногострочников(Ожидается) Экспорт
	
	ВК = Ожидается.Тест().Компонента("GherkinParser").Установить("КлючевыеСлова", ПолучитьКлючевыеСлова(Ожидается)).Вернуть();
	
	ВременнаяПапка = ПолучитьИмяВременногоФайла();
	УдалитьФайлы(ВременнаяПапка);
	СоздатьКаталог(ВременнаяПапка);
	ВременнаяПапка = ВременнаяПапка + ПолучитьРазделительПути();
	
	ТекстФайла =
	"# language: ru
	|@ExportScenarios
	|Функционал: Подсценарии
	|Сценарий: Я читаю стихи
	|	Когда я начинаю читать стихи
	| 	  ```
	|		В кварталах дальних и печальных,
	|		что утром серы и пусты,
	|		где выглядят смешно и жалко
	|		сирень и прочие цветы,
	|   	```
	|	Тогда я не могу остановиться
	|		```
	|		есть дом шестнадцатиэтажный,
	|		под домом тополь или клен
	|		стоит ненужный и усталый,
	|		в пустое небо устремлен;	
	|  		 ```
	|	Затем повторяю их снова и снова
	|  		""""""
	|		стоит под тополем скамейка,
	|		и, лбом уткнувшийся в ладонь,
	|  		""""""
	|  		""""""
	|		на ней уснул и видит море
	|		писатель Дима Рябоконь.
	|  		""""""
	|Сценарий: я не могу остановиться
	|	Затем я декларирую вслух
	|		```
	|		Он развязал и выпил водки,
	|		он на хер из дому ушел,
	|		он захотел увидеть море,
	|		но до вокзала не дошел.
	|  		```
	|Сценарий: повторяю их снова и снова
	|	Тогда я повторяю любимые строки
	|  		""""""
	|		Он захотел уехать к морю,
	|		оно – страдания предел.
	|		Проматерился, проревелся
	|		и на скамейке захрапел.	
	|  		""""""
	|  		""""""
	|		Но море сине-голубое,
	|		оно само к нему пришло,
	|		и, утреннее и родное,
	|		заулыбалося светло.	
	|  		""""""
	|";
	
	ФайлПодсценариев = ВременнаяПапка + "Экспортируемые подсценарии.feature";
	ЗаписьТекста = Новый ЗаписьТекста(ФайлПодсценариев, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(ТекстФайла);
	ЗаписьТекста.Закрыть();
	
	ТекстФайла =
	"# language: ru
	|Функционал: Поэзия Бориса Рыжего
	|Сценарий:
	|	Пусть я читаю стихи
	|	""""""начло
	|	Приобретут всеевропейский лоск
	|	слова трансазиатского поэта,
	|	я позабуду сказочный Свердловск
	|	и школьный двор в районе Вторчермета.
	|	@@ @@ @@
	|	Но где бы мне ни выпало остыть,
	|	в Париже знойном, Лондоне промозглом,
	|	мой жалкий прах советую зарыть
	|	на безымянном кладбище свердловском.
	|	""""""
	|	""""""развитие
	|	Не в плане не лишённой красоты,
	|	но вычурной и артистичной позы,
	|	а потому что там мои кенты,
	|	их профили на мраморе и розы.
	|   ### ### ###
	|	На купоросных голубых снегах,
	|	закончившие ШРМ на тройки,
	|	они запнулись с медью в черепах
	|	как первые солдаты перестройки.	
	|	""""""
	|  	""""""пусто
	|  	""""""
	|	""""""финал
	|	Пусть Вторчермет гудит своей трубой.
	|	Пластполимер пускай свистит протяжно.
	|	И женщина, что не была со мной,
	|	альбом откроет и закурит важно.
    |	// *** //
	|	Она откроет голубой альбом,
	|	где лица наши будущим согреты,
	|	где живы мы, в альбоме голубом,
	|	земная шваль: бандиты и поэты.	
	|	""""""
	|";
	
	ОсновнойФайл = ВременнаяПапка + "Вызов подсценариев.feature";
	ЗаписьТекста = Новый ЗаписьТекста(ОсновнойФайл, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(ТекстФайла);
	ЗаписьТекста.Закрыть();
	
	ДанныеФайла = Ожидается.Тест("Чтение сценариев").Что(ВК).Функц("ПрочитатьФайл", ОсновнойФайл, ВременнаяПапка).JSON().Вернуть();
	Ожидается.Тест("Один сценарий из файла").Что(ДанныеФайла).Получить("filename").Равно(ОсновнойФайл);
	ШагиСценария = Ожидается.Тест("Шаги сценария").Что(ДанныеФайла).Получить("scenarios", 0, "steps").Вернуть();
	
	ШагиПодсценария = Ожидается.Тест("Строки подсценария").Что(ШагиСценария).Получить(0, "snippet", "steps").Вернуть();
	Ожидается.Тест("Первая строфа").Что(ШагиПодсценария).Получить(0, "multilines", 0, "lines", 0, "text").Равно("Приобретут всеевропейский лоск");
	Ожидается.Тест("Вторая строфа").Что(ШагиПодсценария).Получить(1, "snippet", "steps", 0, "multilines").Получить(0, "lines", 0, "text").Равно("Не в плане не лишённой красоты,");
	Ожидается.Тест("Третья строфа").Что(ШагиПодсценария).Получить(2, "snippet", "steps", 0, "multilines").Получить(0, "lines", 0, "text").Равно("стоит под тополем скамейка,");
	Ожидается.Тест("Последняя стр").Что(ШагиПодсценария).Получить(2, "snippet", "steps", 0, "multilines").Получить(1, "lines", 0, "text").Равно("Пусть Вторчермет гудит своей трубой.");
	
	УдалитьФайлы(ОсновнойФайл);
	УдалитьФайлы(ФайлПодсценариев);
	УдалитьФайлы(ВременнаяПапка);
	
КонецПроцедуры

&НаКлиенте
Процедура Тест_СекцияПеременные(Ожидается) Экспорт
	
	ВК = Ожидается.Тест().Компонента("GherkinParser").Установить("КлючевыеСлова", ПолучитьКлючевыеСлова(Ожидается)).Вернуть();
	
	ТекстСценария =
	"Функциональность: Переменные
	|Переменные: 
	|	
	|	* Контрагенты
	|	| Ключ       | Наименование | Код
	|	| Продавец   | ""Василёк""  | 102
	|	| Покупатель | ""Ромашка""  | 005
	|
	|	Количество = 10
	|
	|	Товар = ""Цветы""
	|
	|	Услуга = 'Доставка'
	|
	|	МногострочныйТекст = 
	|	""""""
	|	Многострочный
	|	текст переменной
	|	""""""
	|
	|	| Имя    | Представление | Цена |
	|	| Товар  | ""Табуретка"" | 100  |
	|	| Услуга | ""Доставка""  |  30  |
	|	| Работа | ""Монтаж""    |  50  |  
	|
	|";
	
	ДанныеФайла = Ожидается.Тест("Парсинг строки").Что(ВК).Функц("Прочитать", ТекстСценария).JSON().Вернуть();
	Переменные = Ожидается.Тест("Переменные").Что(ДанныеФайла).Получить("variables", "items").Вернуть();
	Ожидается.Тест("Имя таблицы контрагентов").Что(Переменные).Получить(0, "name").Равно("Контрагенты");
	Ожидается.Тест("Таблица контрагентов").Что(Переменные).Получить(0, "table", "body").Функц("Количество").Равно(2);
	Ожидается.Тест("Имя числовой переменной").Что(Переменные).Получить(1, "name").Равно("Количество");
	Ожидается.Тест("Целочисленная переменная").Что(Переменные).Получить(1, "value", "text").Равно(10);
	Ожидается.Тест("Строковая переменная 1").Что(Переменные).Получить(2, "value", "text").Равно("Цветы");
	Ожидается.Тест("Строковая переменная 2").Что(Переменные).Получить(3, "value", "text").Равно("Доставка");
	Ожидается.Тест("Имя многострочной переменной").Что(Переменные).Получить(4, "name").Равно("МногострочныйТекст");
	Ожидается.Тест("Многострочная переменная").Что(Переменные).Получить(4, "lines", "lines", 0, "text").Равно("Многострочный");
	Ожидается.Тест("Многострочная переменная").Что(Переменные).Получить(4, "lines", "lines", 1, "text").Равно("текст переменной");
	Ожидается.Тест("Таблица без имени").Что(Переменные).Получить(5).Ошибка().Получить("name");
	Ожидается.Тест("Безымянная таблица").Что(Переменные).Получить(5, "table", "body").Функц("Количество").Равно(3);
	
	ВременнаяПапка = ПолучитьИмяВременногоФайла();
	УдалитьФайлы(ВременнаяПапка);
	СоздатьКаталог(ВременнаяПапка);
	ВременнаяПапка = ВременнаяПапка + ПолучитьРазделительПути();
	
	ИмяФайла = "ФайлИмпорта.feature";
	ФайлПодсценариев = ВременнаяПапка + ИмяФайла;
	ЗаписьТекста = Новый ЗаписьТекста(ФайлПодсценариев, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(ТекстСценария);
	ЗаписьТекста.Закрыть();
	
	ТекстСценария =
	"Функциональность: Переменные
	|Переменные: 
	|	* Номенклатура
	|	| Имя     | Цена |
	|	| Товар   | 100  |
	|	| Услуга  |  50  |
	|	| Работа  |  80  |  
	|	Стоимость = 230
	|";
	
	ФайлНоменклатуры = ВременнаяПапка + "Номенклатура.feature";
	ЗаписьТекста = Новый ЗаписьТекста(ФайлНоменклатуры, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(ТекстСценария);
	ЗаписьТекста.Закрыть();
	
	ТекстСценария =
	"Функциональность: Переменные
	|Переменные: 
	|	Импорт ""ФайлИмпорта.feature""
	|	Импорт ""Номенклатура.feature""
	|
	|";
	
	ОсновнойФайл = ВременнаяПапка + "ОсновнойФайл.feature";
	ЗаписьТекста = Новый ЗаписьТекста(ОсновнойФайл, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(ТекстСценария);
	ЗаписьТекста.Закрыть();
	
	ДанныеФайла = Ожидается.Тест("Чтение сценариев").Что(ВК).Функц("ПрочитатьФайл", ОсновнойФайл, ВременнаяПапка).JSON().Вернуть();
	Переменные = Ожидается.Тест("Переменные").Что(ДанныеФайла).Получить("variables", "import", 0, "items").Вернуть();
	Ожидается.Тест("Путь файла").Что(ДанныеФайла).Получить("variables", "import", 0, "path").Равно(ФайлПодсценариев);
	Ожидается.Тест("Импорт файла 1").Что(ДанныеФайла).Получить("variables", "import", 0, "name").Равно(ИмяФайла);
	Ожидается.Тест("Импорт файла 2").Что(ДанныеФайла).Получить("variables", "import", 1, "name").Равно("Номенклатура.feature");
	Ожидается.Тест("Импорт переменных: имя таблицы").Что(Переменные).Получить(0, "name").Равно("Контрагенты");
	Ожидается.Тест("Импорт переменных: данные таблицы").Что(Переменные).Получить(0, "table", "body").Функц("Количество").Равно(2);
	Ожидается.Тест("Импорт простой переменной").Что(Переменные).Получить(1, "name").Равно("Количество");

	ОтборПеременных = "[""ФайлИмпорта.feature""]";
	ДанныеФайла = Ожидается.Тест().Что(ВК).Функц("ПолучитьПеременные", ОтборПеременных).JSON().Вернуть();
	Ожидается.Тест("Файл переменных").Что(ДанныеФайла).Получить(0, "path").Равно(ФайлПодсценариев);
	Ожидается.Тест("Найденный файл переменных").Что(ДанныеФайла).Функц("Количество").Равно(1);
	ДанныеФайла = Ожидается.Тест().Что(ВК).Функц("ПолучитьПеременные").JSON().Вернуть();
	Ожидается.Тест("Файлы переменных").Что(ДанныеФайла).Функц("Количество").Равно(3);

	Ожидается.Тест("Очищаем кэш одного файла").Что(ВК).Проц("ОчиститьКэш", ОсновнойФайл).Функц("ПолучитьПеременные").JSON().Функц("Количество").Равно(2);
	Ожидается.Тест("Очищаем кэш полностью").Что(ВК).Проц("ОчиститьКэш").Функц("ПолучитьПеременные").Равно("null");
	
КонецПроцедуры

&НаКлиенте
Процедура Тест_ОшибкиПарсингаGherkin(Ожидается) Экспорт
	
	ВК = Ожидается.Тест().Компонента("GherkinParser").Установить("КлючевыеСлова", ПолучитьКлючевыеСлова(Ожидается)).Вернуть();
	
	ВременнаяПапка = ПолучитьИмяВременногоФайла();
	УдалитьФайлы(ВременнаяПапка);
	СоздатьКаталог(ВременнаяПапка);
	ВременнаяПапка = ВременнаяПапка + ПолучитьРазделительПути();
	ТестируемыйФайл = ВременнаяПапка + "Тестовый сценарий.feature";
	ФайлПодсценариев = ВременнаяПапка + "Экспортируемые подсценарии.feature";
	НесуществующийФайл = ВременнаяПапка + (Новый УникальныйИдентификатор);
	НесуществующаяПапка = ВременнаяПапка + (Новый УникальныйИдентификатор);
	
	ОшибкиЧтения = Ожидается.Тест("Попытка прочитать несуществующий файл").Что(ВК).Функц("ПрочитатьФайл", НесуществующийФайл).JSON().Вернуть();
	Ожидается.Тест("Количество ошибок чтения файла").Что(ОшибкиЧтения).Получить("errors").Функц("Количество").Равно(1);
	Ожидается.Тест("Наименование файла с ошибкой").Что(ОшибкиЧтения).Получить("errors", 0, "filename").Равно(НесуществующийФайл);
	
	ОшибкиЧтения = Ожидается.Тест("Попытка прочитать несуществующую папку").Что(ВК).Функц("ПрочитатьПапку", НесуществующаяПапка).JSON().Вернуть();
	Ожидается.Тест("Количество ошибок чтения папки").Что(ОшибкиЧтения).Функц("Количество").Равно(1);
	Ожидается.Тест("Наименование папки с ошибкой").Что(ОшибкиЧтения).Получить(0, "filename").Равно(НесуществующаяПапка);
	
	ОшибкиЧтения = Ожидается.Тест("Чтение несуществующей библиотеки").Что(ВК).Функц("ПрочитатьПапку", ВременнаяПапка, НесуществующаяПапка).JSON().Вернуть();
	Ожидается.Тест("Количество ошибок чтения папки").Что(ОшибкиЧтения).Функц("Количество").Равно(1);
	Ожидается.Тест("Наименование папки с ошибкой").Что(ОшибкиЧтения).Получить(0, "filename").Равно(НесуществующаяПапка);
	
	ТекстФайла =
	"# language: " + Строка(Новый УникальныйИдентификатор) + "
	|Функционал: Ошибки
	|";
	
	ЗаписьТекста = Новый ЗаписьТекста(ТестируемыйФайл, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(ТекстФайла);
	ОшибкиЧтения = Ожидается.Тест("Попытка прочитать занятый файл").Что(ВК).Функц("ПрочитатьФайл", ТестируемыйФайл).JSON().Вернуть();
	Ожидается.Тест("Наименование занятого файла").Что(ОшибкиЧтения).Получить("errors", 0, "filename").Равно(ТестируемыйФайл);
	ОшибкиЧтения = Ожидается.Тест("Чтение папки с занятым файлом").Что(ВК).Функц("ПрочитатьПапку", ВременнаяПапка).JSON().Вернуть();
	Ожидается.Тест("Наименование занятого файла").Что(ОшибкиЧтения).Получить(0, "filename").Равно(ТестируемыйФайл);
	ОшибкиЧтения = Ожидается.Тест("Несуществующий файл и папка").Что(ВК).Функц("ПрочитатьФайл", ТестируемыйФайл, НесуществующаяПапка).JSON().Вернуть();
	Ожидается.Тест("Наименование занятого файла").Что(ОшибкиЧтения).Получить("errors", 0, "filename").Равно(ТестируемыйФайл);
	Ожидается.Тест("Наименование папки с ошибкой").Что(ОшибкиЧтения).Получить("errors", 1, "filename").Равно(НесуществующаяПапка);
	
	ЗаписьТекста.Закрыть();
	
	УдалитьФайлы(ТестируемыйФайл);
	УдалитьФайлы(ФайлПодсценариев);
	УдалитьФайлы(ВременнаяПапка);
	
КонецПроцедуры

&НаКлиенте
Процедура Тест_ОшибкаРекурсии(Ожидается) Экспорт
	
	ВК = Ожидается.Тест().Компонента("GherkinParser").Установить("КлючевыеСлова", ПолучитьКлючевыеСлова(Ожидается)).Вернуть();
	
	ВременнаяПапка = ПолучитьИмяВременногоФайла();
	УдалитьФайлы(ВременнаяПапка);
	СоздатьКаталог(ВременнаяПапка);
	ВременнаяПапка = ВременнаяПапка + ПолучитьРазделительПути();
	
	ТекстСценария =
	"# language: ru
	|@ExportScenarios
	|Функционал: Ошибка рекурсии
	|Сценарий: Я читаю книгу
	|	Допустим я беру книгу
	|	и я открываю страницу
	|	Когда я читаю книгу
	|	Тогда я отдыхаю
	|Сценарий: Я отдыхаю
	|	Если я читаю книгу
	|	Тогда я отдыхаю
	|";
	
	ФайлРекурсии = ВременнаяПапка + "Рекурсивный сценарий.feature";
	ЗаписьТекста = Новый ЗаписьТекста(ФайлРекурсии, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(ТекстСценария);
	ЗаписьТекста.Закрыть();

	ОшибкаРекурсии = "Recursive call error";
	ШагиСценария = Ожидается.Тест("Рекурсивный сценарий").Что(ВК).Функц("ПрочитатьФайл", ФайлРекурсии, ВременнаяПапка).Получить("scenarios", 0, "steps").Вернуть();
	Ожидается.Тест("Отсутствие ошибки рекурсии").Что(ШагиСценария).Получить(1).Ошибка().Получить("error");
	Ожидается.Тест("Сниппет нулевой рекурсии").Что(ШагиСценария).Получить(2, "snippet").Равно("ячитаюкнигу");
	Ожидается.Тест("Ошибка рекурсивного вызова").Что(ШагиСценария).Получить(2, "error").Равно(ОшибкаРекурсии);
	Ожидается.Тест("Рекурсия шага 1").Что(ШагиСценария).Получить(3, "snippet", "steps", 0, "snippet").Равно("ячитаюкнигу");
	Ожидается.Тест("Рекурсия шага 2").Что(ШагиСценария).Получить(3, "snippet", "steps", 1, "snippet").Равно("яотдыхаю");
	Ожидается.Тест("Ошибка рекурсии 1").Что(ШагиСценария).Получить(3, "snippet", "steps", 0, "error").Равно(ОшибкаРекурсии);
	Ожидается.Тест("Ошибка рекурсии 2").Что(ШагиСценария).Получить(3, "snippet", "steps", 1, "error").Равно(ОшибкаРекурсии);
	
	УдалитьФайлы(ФайлРекурсии);
	УдалитьФайлы(ВременнаяПапка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедуры

&НаСервере
Функция ПолучитьМакетНаСервере(ИмяМакета, УникальныйИдентификатор)
	
	ОбработкаОбъект = Вычислить("РеквизитФормыВЗначение(""Объект"")");
	Макет = ОбработкаОбъект.ПолучитьМакет(ИмяМакета);
	Возврат Вычислить("ПоместитьВоВременноеХранилище(Макет, УникальныйИдентификатор)");
	
КонецФункции

&НаКлиенте
Функция ЭтоПлатформа1С()
	
	Попытка
		Ид = Вычислить("ТекущийСценарий()");
		Возврат Ложь;
	Исключение
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Функция ПолучитьКлючевыеСлова(Ожидается)
	
	Если ЭтоПлатформа1С() Тогда
		Идентификатор = Вычислить("УникальныйИдентификатор");
		Адрес = ПолучитьМакетНаСервере("Keywords", Идентификатор);
		ДвоичныеДанные = Вычислить("ПолучитьИзВременногоХранилища(Адрес)");
		Выполнить("УдалитьИзВременногоХранилища(Адрес)");
		Поток = ДвоичныеДанные.ОткрытьПотокДляЧтения();
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		УдалитьФайлы(ИмяВременногоФайла);
		ИмяВременнойПапки = ИмяВременногоФайла + ПолучитьРазделительПути();
		ЧтениеZipФайла = Новый ЧтениеZipФайла(Поток);
		Для каждого ЭлементZip Из ЧтениеZipФайла.Элементы Цикл
			ЧтениеZipФайла.Извлечь(ЭлементZip, ИмяВременнойПапки);
			ИмяВременногоФайла = ИмяВременнойПапки + ЭлементZip.ПолноеИмя;
			ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
			Поток = ДвоичныеДанные.ОткрытьПотокДляЧтения();
			ЧтениеТекста = Новый ЧтениеТекста(Поток, КодировкаТекста.UTF8);
			ТекстМакета = ЧтениеТекста.Прочитать();
			ЧтениеТекста.Закрыть();
			УдалитьФайлы(ИмяВременногоФайла);
			УдалитьФайлы(ИмяВременнойПапки);
			Возврат ТекстМакета;
		КонецЦикла;
	Иначе
		ИмяФайла = Вычислить("ТекущийСценарий().Каталог") + "/../keywords.json";
		ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.UTF8);
		ТекстМакета = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
		Возврат ТекстМакета;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПрочитатьСтрокуJSON(ТекстJSON)
	
	Если ПустаяСтрока(ТекстJSON) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПоляДаты = Новый Массив;
	ПоляДаты.Добавить("CreationDate");
	ПоляДаты.Добавить("date");
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	Возврат ПрочитатьJSON(ЧтениеJSON, , ПоляДаты);
	
КонецФункции

&НаКлиенте
Функция ЗаписатьСтрокуJSON(Данные)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Данные);
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЛоготипНаСервере(УникальныйИдентификатор)
	
	ФайлРесурса = "v8res://mngbase/About.lf";
	ВременныйФайл = ПолучитьИмяВременногоФайла();
	КопироватьФайл(ФайлРесурса, ВременныйФайл);
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ВременныйФайл);
	УдалитьФайлы(ВременныйФайл);
	
	Стр = ТекстовыйДокумент.ПолучитьТекст();
	НачПоз = СтрНайти(Стр, "{#base64:");
	КонПоз = СтрНайти(Стр, "}", , НачПоз);
	Стр = Сред(Стр, НачПоз + 9, КонПоз - НачПоз - 9);
	ДвоичныеДанные = Base64Значение(Стр);
	
	Картинка = Новый Картинка(ДвоичныеДанные);
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("screenDensity", "xdpi");
	ДвоичныеДанные = Картинка.ПолучитьДвоичныеДанные(Ложь, Соответствие);
	Возврат Вычислить("ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор)");
	
КонецФункции

&НаКлиенте
Функция ПолучитьЛоготип1С()
	
	Если ЭтоПлатформа1С() Тогда
		Идентификатор = Вычислить("УникальныйИдентификатор");
		Адрес = ПолучитьЛоготипНаСервере(Идентификатор);
		ДвоичныеДанные = Вычислить("ПолучитьИзВременногоХранилища(Адрес)");
		Выполнить("УдалитьИзВременногоХранилища(Адрес)");
		Возврат ДвоичныеДанные;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПрочитатьТекст(ДвоичныеДанные)
	
	Поток = ДвоичныеДанные.ОткрытьПотокДляЧтения();
	ЧтениеТекста = Новый ЧтениеТекста(Поток);
	Возврат СокрЛП(ЧтениеТекста.Прочитать());
	
КонецФункции

&НаКлиенте
Функция ФайлСуществует(ИмяФайла)
	
	Файл = Новый Файл(ИмяФайла);
	Возврат Файл.Существует();
	
КонецФункции

&НаКлиенте
Функция НайтиБраузер()
	
	СисИнфо = Новый СистемнаяИнформация;
	Если СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		Попытка
			WScriptShell = Новый COMОбъект("WScript.Shell");
		Исключение
			ВызватьИсключение "Не удалось подключить COM объект <WScript.Shell>";
		КонецПопытки;
		ПапкиПоиска = Новый Массив;
		ПапкиПоиска.Добавить("C:\Program Files");
		ПапкиПоиска.Добавить("%ProgramFiles%");
		ПапкиПоиска.Добавить("%ProgramFiles(x86)%");
		ПапкиПоиска.Добавить("%LocalAppData%");
		ИмяФайла = "\Google\Chrome\Application\chrome.exe";
		Для каждого ПапкаПоиска Из ПапкиПоиска Цикл
			ProgramFiles = WScriptShell.ExpandEnvironmentStrings(ПапкаПоиска);
			Файл = Новый Файл(ProgramFiles + ИмяФайла);
			Если Файл.Существует() Тогда
				Возврат Файл.ПолноеИмя;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86 ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		ФайлыПоиска = Новый Массив;
		ФайлыПоиска.Добавить("/snap/bin/chromium");
		ФайлыПоиска.Добавить("/opt/google/chrome/chrome");
		Для каждого ИмяФайла Из ФайлыПоиска Цикл
			Файл = Новый Файл(ИмяФайла);
			Если Файл.Существует() Тогда
				Возврат Файл.ПолноеИмя;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ВызватьИсключение "Не удалось найти интернет-браузер";
	
КонецФункции

&НаКлиенте
Процедура СлучайныйТекстовыйФайл(Ожидается, ИмяПапки, ИмяФайла, ИскомыйТекст = "")
	
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	НомерСтроки = ГСЧ.СлучайноеЧисло(1, 10);
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	Для Номер = 1 По 10 Цикл
		Если Номер = НомерСтроки Тогда
			НачалоСтроки = Ожидается.СлучайныйТекст();
			КонецСтроки = Ожидается.СлучайныйТекст();
			ТекстСтроки = НачалоСтроки + ИскомыйТекст + КонецСтроки;
		Иначе
			ПримерТекста = Ожидается.СлучайныйТекст();
		КонецЕсли;
		ТекстовыйДокумент.ДобавитьСтроку(ТекстСтроки);
	КонецЦикла;
	ПолноеИмя = ИмяПапки + "/" + ИмяФайла;
	ТекстовыйДокумент.Записать(ПолноеИмя, КодировкаТекста.UTF8);
	
КонецПроцедуры

#КонецОбласти